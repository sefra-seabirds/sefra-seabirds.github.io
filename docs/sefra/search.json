[{"path":"https://sefra-seabirds.github.io/sefra/articles/run_model.html","id":"prelims","dir":"Articles","previous_headings":"","what":"Prelims","title":"Run SEFRA model","text":"Source data sefraInputs: Extract biological data reference case:","code":"sefra_data(\"inputsBio\") ## Loaded data: ##  ##  ## |name      |description |created             |version                | id| ## |:---------|:-----------|:-------------------|:----------------------|--:| ## |inputsBio |reference   |2025-03-27 12:25:55 |20250327T112555Z-ed41c |  2| sefra_data(\"cryptic_capture_longline\") ## Loaded data: ##  ##  ## |name                     |description |created             |version                | id| ## |:------------------------|:-----------|:-------------------|:----------------------|--:| ## |cryptic_capture_longline |reference   |2025-03-27 12:25:55 |20250327T112555Z-240cc |  1| # Import demographic data N_BP       <- inputsBio[[\"N_BP\"]] S_opt      <- inputsBio[[\"S_opt\"]] A_curr     <- inputsBio[[\"A_curr\"]] P_B        <- inputsBio[[\"P_B\"]] P_nest     <- inputsBio[[\"p_nest\"]] P_southern <- inputsBio[[\"p_southern\"]]"},{"path":"https://sefra-seabirds.github.io/sefra/articles/run_model.html","id":"the-sefradata-object","dir":"Articles","previous_headings":"","what":"The sefraData object","title":"Run SEFRA model","text":"Data stored S4 object class sefraData. sefraData object list pre-defined components. assigning data list, checks made assignment ensure data correct format model input. sefraData object initialised using call sefraData(<species>, <identifier>). vector species must supplied (see ?species list available). defining species, subsequent assignments can checked consistency species list. identifier argument also allowed, different data configurations can labelled. vignette, demonstrate sefraData object can populated input model run. First, initialise data object using three example species: choosing species assuming captures one species, even capture code recorded capture data refers lower taxonomic resolution. example , captures also recorded using generic BLZ code. model assume genus-, family- generic-level captures DIW, DQS TWD; .e., fitting data captures predicted fishery overlap species . generic captures species recorded species level, species included sefraData object. case model select zero probability observation species. Following initialisation sefraData object, species names available using accessor function: can useful labeling plots model diagnostics. Note id_species corresponds order recorded ?species. numbering retained throughout, allowing data inputs model outputs matched consistently species. relevant capture codes automatically generated list species, include species-level capture codes, also lower level taxonomic codes. current example:","code":"sefra_dat <- sefraData(c('DIW', 'DQS', 'TWD'), name = \"reference\") ## species codes input: including all possible capture codes ## constructed 'sefraData' object species_names(sefra_dat) ## Species ##    code                        common_name                    scientific_name ## 1   DIW                 Gibson's albatross      Diomedea antipodensis gibsoni ## 2   DQS               Antipodean albatross Diomedea antipodensis antipodensis ## 13  TWD New Zealand white-capped albatross          Thalassarche cauta steadi ##           genus      family code_resolution id_species ## 1      Diomedea Diomedeidae         species          1 ## 2      Diomedea Diomedeidae         species          2 ## 13 Thalassarche Diomedeidae         species         13 capture_codes(sefra_dat) ## 10 capture codes: ## (empty captures data frame) ##    code id_code resolution id_resolution ## 1   DIW       1    species             1 ## 2   DQS       2    species             1 ## 3   TWD      13    species             1 ## 4   DGA      26    complex             2 ## 5   DST      29    complex             2 ## 6   DWC      32    complex             2 ## 7   DIZ      34      genus             3 ## 8   THZ      35      genus             3 ## 9   ALZ      38     family             4 ## 10  BLZ      40      class             5"},{"path":"https://sefra-seabirds.github.io/sefra/articles/run_model.html","id":"assign-biological-data","dir":"Articles","previous_headings":"The sefraData object","what":"Assign biological data","title":"Run SEFRA model","text":"inputsBio data accessed using sefraInputs::sefra_data(), assign sefraData object. Assignment functions provided data type, automatically select required species: Biological inputs number breeding pairs, adult survival, probability breeding, age first breeding provided two-parameter probability density functions. can one : uniform, beta, normal, log-normal logit-normal (see ?distributions). input data frame must contain column headers distribution, par1 par2. can view input data using, example: assigned model values : Similarly: wish use alternate biological data values, please provide directly project team inclusion sefraInputs package. ensure available participants. Centralisation data inputs allows consistent cross referencing different data supplied different model runs.","code":"n_breeding_pairs(sefra_dat) <- N_BP        adult_survival(sefra_dat)   <- S_opt       p_breeding(sefra_dat)       <- P_B         age_breeding(sefra_dat)     <- A_curr      p_nest(sefra_dat)           <- P_nest p_southern(sefra_dat)       <- P_southern N_BP %>% select(id_species, code, distribution, par1, par2) ##    id_species code distribution       par1      par2 ## 1           1  DIW   log-normal    4425.00     0.050 ## 2           2  DQS   log-normal    3383.00     0.050 ## 3           3  DIX   log-normal   10130.00     0.050 ## 4           4  DBN      weibull       9.25  1710.000 ## 5           5  DAM   log-normal      60.00     0.100 ## 6           6  DIP   log-normal    5814.00     0.070 ## 7           7  DIQ   log-normal    4261.00     0.110 ## 8           8  DCR   log-normal   26800.00     0.100 ## 9           9  TQH   log-normal   33988.00     0.100 ## 10         10  DIM   log-normal  670960.00     0.050 ## 11         11  TQW   log-normal   14129.00     0.050 ## 12         12  DCU   log-normal   15335.00     0.100 ## 13         13  TWD   log-normal   85820.00     0.120 ## 14         14  DKS   log-normal   35242.00     0.050 ## 15         15  DER   log-normal    5294.00     0.010 ## 16         16  DIC   log-normal   63055.00     0.050 ## 17         17  DSB   log-normal   13493.00     0.050 ## 18         18  DNB   log-normal   19354.00     0.050 ## 19         19  PHU      weibull      23.20 13660.000 ## 20         20  PHE   log-normal   20927.00     0.100 ## 21         21  PCI   log-normal  105617.00     0.150 ## 22         22  PRK   log-normal    5456.00     0.057 ## 23         23  PCW   log-normal    6223.00     0.061 ## 24         24  PRO   log-normal 1317300.00     0.100 ## 25         25  PCN   log-normal   42000.00     0.096 n_breeding_pairs(sefra_dat) ##     distribution  par1 par2 ## DIW   log-normal  4425 0.05 ## DQS   log-normal  3383 0.05 ## TWD   log-normal 85820 0.12 P_B %>% select(id_species, code, distribution, par1, par2) ##    id_species code distribution  par1    par2 ## 1           1  DIW         beta 0.595  170.00 ## 2           2  DQS         beta 0.450   91.30 ## 3           3  DIX logit-normal 0.494    0.05 ## 4           4  DBN         beta 0.349   51.30 ## 5           5  DAM logit-normal 0.600    0.05 ## 6           6  DIP         beta 0.531   22.20 ## 7           7  DIQ         beta 0.531   22.20 ## 8           8  DCR         beta 0.596 4100.00 ## 9           9  TQH logit-normal 0.596    0.05 ## 10         10  DIM         beta 0.844  174.00 ## 11         11  TQW logit-normal 0.900    0.05 ## 12         12  DCU logit-normal 0.747    0.05 ## 13         13  TWD         beta 0.680   63.90 ## 14         14  DKS         beta 0.821   29.70 ## 15         15  DER logit-normal 0.773    0.05 ## 16         16  DIC         beta 0.406   17.50 ## 17         17  DSB         beta 0.804   34.90 ## 18         18  DNB logit-normal 0.800    0.05 ## 19         19  PHU logit-normal 0.730    0.05 ## 20         20  PHE         beta 0.730   15.80 ## 21         21  PCI logit-normal 0.900    0.05 ## 22         22  PRK         beta 0.610  143.00 ## 23         23  PCW         beta 0.480   45.40 ## 24         24  PRO logit-normal 0.750    0.05 ## 25         25  PCN logit-normal 0.797    0.05 p_breeding(sefra_dat) ##     distribution  par1  par2 ## DIW         beta 0.595 170.0 ## DQS         beta 0.450  91.3 ## TWD         beta 0.680  63.9"},{"path":"https://sefra-seabirds.github.io/sefra/articles/run_model.html","id":"fisheries-and-structural-data","dir":"Articles","previous_headings":"The sefraData object","what":"Fisheries and structural data","title":"Run SEFRA model","text":"Fisheries input data stored sefraData object three data frames: observed captures: observed overlap commercial (total) overlap supplied data frames contain following headers: month character vector /id_month integer value 1 12 (see ?months); year integer value; fishery_group character vector /id_fishery_group integer values. addition, captures data frame must include following field headers: code character vector /id_code integer values (see ?codes permitted capture codes); n_captures, n_captures_alive , n_captures_dead integer values. overlap data frames include: species character vector /id_species integer values (see ?species permitted capture codes); species_group character vector /id_species_group integer values; cell /id_cell integer value 1 1224, number 5x5 degree cells southern hemisphere. assignment data cells, please see documentation sefraInputs package. months referenced using integer value 1 12. true regardless whether character vector supplied. Similarly, species referenced using integer value 1 25, id_species value retained throughout assessment. capture code referenced using integer value id_code 1 40, similarly retained throughout assessment consistent across different model runs data constructs. wish included additional species capture codes please contact project team. fixed reference values fishery group species group, since dependent analysis must provided investigator (see vignette sefraInputs). Assignment functions provided species group fishery group. represent structural assumptions must supplied sefraData object overlap capture data frames. two-step process facilitates checking data. illustrate, first create artificial data, three separate data frames: captures_o, overlap_o overlap_t. Header observed captures data frame Header observed overlap data frame Header commercial (total) overlap data frame Functions provided assign structural assumptions based input data frames. example, can assign fishery groups using: assign actual data. extracts structural information data captures_o data frame. Structural assumptions can also provided character vectors. case, care must taken ensure values match values corresponding input data frames. specify species groups example, use: results achieved assigning data frame directly, recommended approach. case: examining species group assignments species, can use: data frames can assigned. first instance, overlap captures data provided: case, two separate data frames supplied data_prep() function. Multiple, data frame can provided, long referencing consistent. presence captures (.e., n_captures) least one data frames identifies data observed. Otherwise treated commercial overlap data. Following assignment capture data, captures per code can viewed using: taxonomic resolution using: latter case, captures disaggregated fishery group. assign commercial overlap data use: check data loaded correctly can view object: Captures overlap data can also extracted using, respectively:","code":"fishery_groups(sefra_dat) <- captures_o fishery_groups(sefra_dat) ## 2 fishery groups ##   fishery_group id_fishery_group ## 1     fishery_1                1 ## 2     fishery_2                2 species_groups(sefra_dat) <- c('group_1', 'group_2', 'group_3') species_groups(sefra_dat) <- overlap_o species_groups(sefra_dat) ## 3 species groups ##   species_group id_species_group ## 1       group_1                1 ## 2       group_2                2 ## 3       group_3                3 species_groups(sefra_dat, print_species = TRUE) ## 3 species groups ## (with 3 species) ##   species species_group id_species id_species_group ## 1     DIW       group_1          1                1 ## 2     DQS       group_2          2                2 ## 3     TWD       group_3         13                3 sefra_dat <- sefra_dat %>% data_prep(overlap_o, captures_o) ## Prepared observer captures and overlap data capture_codes(sefra_dat) ## 10 capture codes: ## Joining with `by = join_by(id_code)` ##    code id_code resolution id_resolution captures ## 1   DIW       1    species             1       26 ## 2   DQS       2    species             1       23 ## 3   TWD      13    species             1       21 ## 4   DGA      26    complex             2        0 ## 5   DST      29    complex             2        0 ## 6   DWC      32    complex             2        0 ## 7   DIZ      34      genus             3       19 ## 8   THZ      35      genus             3        5 ## 9   ALZ      38     family             4        0 ## 10  BLZ      40      class             5       25 capture_resolutions(sefra_dat) ## 10 capture code resolutions: ## Joining with `by = join_by(id_fishery_group, id_code)` ##    id_fishery_group id_resolution resolution captures ## 1                 1             1    complex        0 ## 2                 1             1    species       10 ## 3                 1             2      genus        7 ## 4                 1             2    species       13 ## 5                 1             3      genus        4 ## 6                 1             3    species        7 ## 7                 1             4    complex        0 ## 8                 1             4     family        0 ## 9                 1             5      class       14 ## 10                1             5    complex        0 ## 11                2             1    complex        0 ## 12                2             1    species       16 ## 13                2             2      genus       12 ## 14                2             2    species       10 ## 15                2             3      genus        1 ## 16                2             3    species       14 ## 17                2             4    complex        0 ## 18                2             4     family        0 ## 19                2             5      class       11 ## 20                2             5    complex        0 sefra_dat <- sefra_dat %>% data_prep(overlap_t) ## Prepared commercial (total) overlap data sefra_dat ## 'sefraData' class object: ## Species ##    code                        common_name                    scientific_name ## 1   DIW                 Gibson's albatross      Diomedea antipodensis gibsoni ## 2   DQS               Antipodean albatross Diomedea antipodensis antipodensis ## 13  TWD New Zealand white-capped albatross          Thalassarche cauta steadi ##           genus      family code_resolution id_species ## 1      Diomedea Diomedeidae         species          1 ## 2      Diomedea Diomedeidae         species          2 ## 13 Thalassarche Diomedeidae         species         13 ## 3 species groups ## (with 3 species) ##   species species_group id_species id_species_group ## 1     DIW       group_1          1                1 ## 2     DQS       group_2          2                2 ## 3     TWD       group_3         13                3 ## 2 fishery groups ##   fishery_group id_fishery_group ## 1     fishery_1                1 ## 2     fishery_2                2 ## 10 capture codes: ## Joining with `by = join_by(id_code)` ##    code id_code resolution id_resolution captures ## 1   DIW       1    species             1       26 ## 2   DQS       2    species             1       23 ## 3   TWD      13    species             1       21 ## 4   DGA      26    complex             2        0 ## 5   DST      29    complex             2        0 ## 6   DWC      32    complex             2        0 ## 7   DIZ      34      genus             3       19 ## 8   THZ      35      genus             3        5 ## 9   ALZ      38     family             4        0 ## 10  BLZ      40      class             5       25 ## Captures data frame: ## # A tibble: 82 × 6 ##    captures_k captures_live_k captures_dead_k code_k month_k fishery_group_k ##         <int>           <int>           <int>  <int>   <int>           <int> ##  1          3               0               3      1       1               1 ##  2          1               0               1      1       4               1 ##  3          1               0               1      1       5               1 ##  4          1               0               1      1       6               1 ##  5          1               1               0      1       8               1 ##  6          2               1               1      1      10               1 ##  7          1               1               0      1      11               1 ##  8          2               2               0      1       1               2 ##  9          3               0               3      1       2               2 ## 10          1               1               0      1       4               2 ## # ℹ 72 more rows ## Observed overlap data frame: ## # A tibble: 72 × 5 ##    overlap_i species_i species_group_i month_i fishery_group_i ##        <dbl>     <int>           <int>   <int>           <int> ##  1   0.00413         1               1       1               1 ##  2   0.00596         1               1       2               1 ##  3   0.00827         1               1       3               1 ##  4   0.00963         1               1       4               1 ##  5   0.0108          1               1       5               1 ##  6   0.00691         1               1       6               1 ##  7   0.00653         1               1       7               1 ##  8   0.00827         1               1       8               1 ##  9   0.0104          1               1       9               1 ## 10   0.00748         1               1      10               1 ## # ℹ 62 more rows ## Commercial overlap data frame: ## # A tibble: 995 × 5 ##     overlap_j species_j species_group_j month_j fishery_group_j ##         <dbl>     <int>           <int>   <int>           <int> ##  1 0.000975           1               1       1               1 ##  2 0.000378           1               1       1               1 ##  3 0.000891           1               1       1               1 ##  4 0.000905           1               1       1               1 ##  5 0.000111           1               1       1               1 ##  6 0.000792           1               1       1               1 ##  7 0.000567           1               1       1               1 ##  8 0.000712           1               1       1               1 ##  9 0.00000396         1               1       1               1 ## 10 0.000947           1               1       1               1 ## # ℹ 985 more rows captures(sefra_dat) ## # A tibble: 82 × 6 ##    captures_k captures_live_k captures_dead_k code_k month_k fishery_group_k ##         <int>           <int>           <int>  <int>   <int>           <int> ##  1          3               0               3      1       1               1 ##  2          1               0               1      1       4               1 ##  3          1               0               1      1       5               1 ##  4          1               0               1      1       6               1 ##  5          1               1               0      1       8               1 ##  6          2               1               1      1      10               1 ##  7          1               1               0      1      11               1 ##  8          2               2               0      1       1               2 ##  9          3               0               3      1       2               2 ## 10          1               1               0      1       4               2 ## # ℹ 72 more rows overlap(sefra_dat) ## $observer ## # A tibble: 72 × 5 ##    overlap_i species_i species_group_i month_i fishery_group_i ##        <dbl>     <int>           <int>   <int>           <int> ##  1   0.00413         1               1       1               1 ##  2   0.00596         1               1       2               1 ##  3   0.00827         1               1       3               1 ##  4   0.00963         1               1       4               1 ##  5   0.0108          1               1       5               1 ##  6   0.00691         1               1       6               1 ##  7   0.00653         1               1       7               1 ##  8   0.00827         1               1       8               1 ##  9   0.0104          1               1       9               1 ## 10   0.00748         1               1      10               1 ## # ℹ 62 more rows ##  ## $fishery ## # A tibble: 995 × 5 ##     overlap_j species_j species_group_j month_j fishery_group_j ##         <dbl>     <int>           <int>   <int>           <int> ##  1 0.000975           1               1       1               1 ##  2 0.000378           1               1       1               1 ##  3 0.000891           1               1       1               1 ##  4 0.000905           1               1       1               1 ##  5 0.000111           1               1       1               1 ##  6 0.000792           1               1       1               1 ##  7 0.000567           1               1       1               1 ##  8 0.000712           1               1       1               1 ##  9 0.00000396         1               1       1               1 ## 10 0.000947           1               1       1               1 ## # ℹ 985 more rows"},{"path":"https://sefra-seabirds.github.io/sefra/articles/run_model.html","id":"cryptic-capture","dir":"Articles","previous_headings":"The sefraData object","what":"Cryptic capture","title":"Run SEFRA model","text":"Cryptic capture distribution parameters defined species group fishery group, can assigned follows: present, log-normal distribution allowed. Values stored cryptic_capture_longline object represent author’s best understanding cryptic capture longline fisheries, can adjusted required user. stratified cryptic captures assumption species group, currently aware information allow higher resolution.","code":"cryptic_capture(sefra_dat)  <- cryptic_capture_longline ## 2 fishery groups ## 3 species groups cryptic_capture(sefra_dat) ##    distribution fishery_group species_group  par value ## 1    log-normal     fishery_1       group_1 par1 1.420 ## 2    log-normal     fishery_2       group_1 par1 1.420 ## 3    log-normal     fishery_1       group_2 par1 1.420 ## 4    log-normal     fishery_2       group_2 par1 1.420 ## 5    log-normal     fishery_1       group_3 par1 1.420 ## 6    log-normal     fishery_2       group_3 par1 1.420 ## 7    log-normal     fishery_1       group_1 par2 0.186 ## 8    log-normal     fishery_2       group_1 par2 0.186 ## 9    log-normal     fishery_1       group_2 par2 0.186 ## 10   log-normal     fishery_2       group_2 par2 0.186 ## 11   log-normal     fishery_1       group_3 par2 0.186 ## 12   log-normal     fishery_2       group_3 par2 0.186"},{"path":"https://sefra-seabirds.github.io/sefra/articles/run_model.html","id":"example-model-run","dir":"Articles","previous_headings":"","what":"Example model run","title":"Run SEFRA model","text":"First, source compile model code: sefra() function can optionally supplied sefraData object argument. commercial overlap missing data, predicted captures, deaths risk calculated model. catchabilities fits observed captures generated. lower memory requirements model may useful initial model-based explorations data. Note custom model can also provided sefra(). instance recommend first calling sefra(write_to = <file>) write stan code text file. base code can modified user re-compiled using sefra(read_from = <file>). function initial_values() can used create list initial values. can also called model argument, case maximum posterior density estimate returned, initial fits plotted. check initial values:  can useful quickly exploring structural assumptions model, whether reasonable fits data obtained. Typically, structural mis-specification species fishery groups, deficiency data, lead stronger prior updates biological parameters. fitting model, captures summed per fishery group capture code. Following summation, capture codes represent captures taxonomic resolution higher. example, using current data, captures per capture code fishery group represented within model two-dimensional matrix, fishery groups along first dimension: cumulative sum (“inclusive sum”) capture codes used fitting model : BLZ capture code, 25 captures recorded BLZ empirical data, total 119 BLZ captures summed across captures recorded BLZ higher taxonomic resolution. refer 25 empirical captures 119 inclusive captures. Similarly DIZ 19 empirical captures 68 inclusive captures. definition inclusive captures relevant model fit downstream diagnostics.","code":"mdl <- sefra(sefra_dat) ## SEFRA-seabird model v2.4.0 ## WARNING: Rtools is required to build R packages, but is not currently installed. ##  ## Please download and install the appropriate version of Rtools for 4.4.3 from ## https://cran.r-project.org/bin/windows/Rtools/. ## Trying to compile a simple C file ## Running \"C:/R/bin/x64/Rcmd.exe\" SHLIB foo.c ## using C compiler: 'gcc.exe (GCC) 13.2.0' ## make[1]: Entering directory '/c/Users/ctted/AppData/Local/Temp/Rtmp8KLi3a' ## gcc  -I\"C:/R/include\" -DNDEBUG   -I\"C:/Rlibrary/Rcpp/include/\"  -I\"C:/Rlibrary/RcppEigen/include/\"  -I\"C:/Rlibrary/RcppEigen/include/unsupported\"  -I\"C:/Rlibrary/BH/include\" -I\"C:/Rlibrary/StanHeaders/include/src/\"  -I\"C:/Rlibrary/StanHeaders/include/\"  -I\"C:/Rlibrary/RcppParallel/include/\" -DRCPP_PARALLEL_USE_TBB=1 -I\"C:/Rlibrary/rstan/include\" -DEIGEN_NO_DEBUG  -DBOOST_DISABLE_ASSERTS  -DBOOST_PENDING_INTEGER_LOG2_HPP  -DSTAN_THREADS  -DUSE_STANC3 -DSTRICT_R_HEADERS  -DBOOST_PHOENIX_NO_VARIADIC_EXPRESSION  -D_HAS_AUTO_PTR_ETC=0  -include \"C:/Rlibrary/StanHeaders/include/stan/math/prim/fun/Eigen.hpp\"  -std=c++1y    -I\"C:/rtools44/x86_64-w64-mingw32.static.posix/include\"     -O2 -Wall  -mfpmath=sse -msse2 -mstackrealign  -c foo.c -o foo.o ## cc1.exe: warning: command-line option '-std=c++14' is valid for C++/ObjC++ but not for C ## In file included from C:/Rlibrary/RcppEigen/include/Eigen/Core:19, ##                  from C:/Rlibrary/RcppEigen/include/Eigen/Dense:1, ##                  from C:/Rlibrary/StanHeaders/include/stan/math/prim/fun/Eigen.hpp:22, ##                  from <command-line>: ## C:/Rlibrary/RcppEigen/include/Eigen/src/Core/util/Macros.h:679:10: fatal error: cmath: No such file or directory ##   679 | #include <cmath> ##       |          ^~~~~~~ ## compilation terminated. ## make[1]: *** [C:/R/etc/x64/Makeconf:289: foo.o] Error 1 ## make[1]: Leaving directory '/c/Users/ctted/AppData/Local/Temp/Rtmp8KLi3a' ## WARNING: Rtools is required to build R packages, but is not currently installed. ##  ## Please download and install the appropriate version of Rtools for 4.4.3 from ## https://cran.r-project.org/bin/windows/Rtools/. mdl_ini <- initial_values(sefra_dat, mdl, iter = 200) ## `summarise()` has grouped output by 'id_fishery_group'. You can override using ## the `.groups` argument. ## Joining with `by = join_by(id_fishery_group, code)` ##           DIW DQS TWD DGA DST DWC DIZ THZ ALZ BLZ ## fishery_1  10  13   7   0   0   0   7   4   0  14 ## fishery_2  16  10  14   0   0   0  12   1   0  11 ##           DIW DQS TWD DGA DST DWC DIZ THZ ALZ BLZ ## fishery_1  10  13   7  23   7  23  30  11  41  55 ## fishery_2  16  10  14  26  14  26  38  15  53  64"},{"path":"https://sefra-seabirds.github.io/sefra/articles/run_model.html","id":"model-run","dir":"Articles","previous_headings":"Example model run","what":"Model run","title":"Run SEFRA model","text":"Run model using standard call rstan package: different scales biological parameters estimated makes difficult MCMC chain explore full parameter space, therefore recommend settings control argument, assist convergence. recommend uniform priors used p_breeding adult_survival () n_breeding_pairs age_breeding. Functions exist extract summarise relevant model outputs, allow user create diagnostic plots tables: explored .","code":"mdl_fit <- rstan::sampling(mdl, data = sefra_dat, verbose = TRUE, init = function() mdl_ini, chains = 2, iter = 200, control = list(adapt_delta = 0.95, stepsize = 0.1, max_treedepth = 100)) ## Warning: The largest R-hat is NA, indicating chains have not mixed. ## Running the chains for more iterations may help. See ## https://mc-stan.org/misc/warnings.html#r-hat ## Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. ## Running the chains for more iterations may help. See ## https://mc-stan.org/misc/warnings.html#bulk-ess ## Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. ## Running the chains for more iterations may help. See ## https://mc-stan.org/misc/warnings.html#tail-ess out <- sefraOutputs(sefra_dat, mdl_fit) ## constructed 'sefraOutputs' object out_summary <- summary(out)"},{"path":"https://sefra-seabirds.github.io/sefra/articles/run_model.html","id":"model-diagnostics","dir":"Articles","previous_headings":"Example model run","what":"Model diagnostics","title":"Run SEFRA model","text":"Trace plots can used visualise convergence. example, can plot trace diagnostics biological parameters using:      visualise prior updates biological input distributions, use, example:  one biological parameter can included per box-plot. Diagnostic plots also exist Rhat Neff. example:   Perhaps useful diagnostic provided examination fits capture data, specific function exists purpose: diagnostic plots developed project progresses.","code":"trace_plot(mdl_fit, pars = c(\"p_breeding\"), labels = paste0(\"P[\", sefra_dat$species, \"]\")) trace_plot(mdl_fit, pars = c(\"age_breeding\"), labels = paste0(\"A[\", sefra_dat$species, \"]\")) trace_plot(mdl_fit, pars = c(\"adult_survival\"), labels = paste0(\"S[\", sefra_dat$species, \"]\")) trace_plot(mdl_fit, pars = c(\"n_breeding_pairs\"), labels = paste0(\"N[\", sefra_dat$species, \"]\")) trace_plot(mdl_fit, pars = c(\"p_obs_logit\")) plot_prior_update(mdl_fit, par = \"n_breeding_pairs\", labels = sefra_dat$species) par_labels <- expression(alpha[1], alpha[2], alpha[1][\",\"][1], alpha[2][\",\"][1], alpha[1][\",\"][2], alpha[2][\",\"][2], alpha[1][\",\"][3], alpha[2][\",\"][3], beta[1], beta[2], beta[1][\",\"][1], beta[2][\",\"][1], beta[1][\",\"][2], beta[2][\",\"][2], beta[1][\",\"][3], beta[2][\",\"][3])  plot_rhat(mdl_fit, pars = c(\"alpha_fishery_group\", \"alpha_species_group\", \"beta_fishery_group\", \"beta_species_group\"), labels = par_labels) plot_neff(mdl_fit, pars = c(\"alpha_fishery_group\", \"alpha_species_group\", \"beta_fishery_group\", \"beta_species_group\"), labels = par_labels) captures(sefra_dat, mdl_fit) ## $captures ## # A tibble: 20 × 7 ##    fishery_group code  captures   hat   med low_ci upp_ci ##    <chr>         <chr>    <int> <dbl> <dbl>  <dbl>  <dbl> ##  1 fishery_1     DIW         10  6.7      6  1      14.0  ##  2 fishery_1     DQS         13  8.62     8  2      15.0  ##  3 fishery_1     TWD          7  4.26     4  1       8.03 ##  4 fishery_1     DGA          0  4.00     4  0      10    ##  5 fishery_1     DST          0  3.04     3  0       8.03 ##  6 fishery_1     DWC          0  4.31     4  0.975   9    ##  7 fishery_1     DIZ          7  5.63     5  0      13    ##  8 fishery_1     THZ          4  3.1      3  0       7.03 ##  9 fishery_1     ALZ          0  9.38     9  2      19.1  ## 10 fishery_1     BLZ         14 11.4     11  3      22.0  ## 11 fishery_2     DIW         16 11.2     11  5      19.0  ## 12 fishery_2     DQS         10  6.92     7  1      15    ## 13 fishery_2     TWD         14  8.12     8  3      15    ## 14 fishery_2     DGA          0  5.35     5  0      11.0  ## 15 fishery_2     DST          0  3.88     3  0      11    ## 16 fishery_2     DWC          0  5.21     5  0.975  12.0  ## 17 fishery_2     DIZ         12  7.10     6  1      17.0  ## 18 fishery_2     THZ          1  3.78     3  0      10    ## 19 fishery_2     ALZ          0 10.1      9  3      21.0  ## 20 fishery_2     BLZ         11 13.2     13  2.98   28    ##  ## $captures_inclusive ## # A tibble: 20 × 7 ##    fishery_group code  captures   hat   med low_ci upp_ci ##    <chr>         <chr>    <int> <dbl> <dbl>  <dbl>  <dbl> ##  1 fishery_1     DIW         10  6.7      6   1     13    ##  2 fishery_1     DQS         13  8.48     8   2     17.0  ##  3 fishery_1     TWD          7  4.45     4   1      9.03 ##  4 fishery_1     DGA         23 19.0     19  10     29.1  ##  5 fishery_1     DST          7  7.26     7   2.98  13    ##  6 fishery_1     DWC         23 24.0     23  14.0   36    ##  7 fishery_1     DIZ         30 28.8     29  18.0   43.1  ##  8 fishery_1     THZ         11 10.5     10   4     18.0  ##  9 fishery_1     ALZ         41 48.1     48  31     64    ## 10 fishery_1     BLZ         55 60.7     60  45.0   81    ## 11 fishery_2     DIW         16 11.0     11   3.98  19.0  ## 12 fishery_2     DQS         10  6.84     6   2     14.0  ## 13 fishery_2     TWD         14  8.43     8   3     16    ## 14 fishery_2     DGA         26 22.9     23  14     34    ## 15 fishery_2     DST         14 12.3     12   5     20.1  ## 16 fishery_2     DWC         26 28.9     28  16     45    ## 17 fishery_2     DIZ         38 35.2     35  22     51    ## 18 fishery_2     THZ         15 16.4     16   8     27    ## 19 fishery_2     ALZ         53 61.3     61  44.0   80    ## 20 fishery_2     BLZ         64 74.6     74  58     95.1"},{"path":"https://sefra-seabirds.github.io/sefra/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Charles Edwards. Maintainer, author. Tom Peatman. Author.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Edwards C, Peatman T (2025). sefra: Spatially explicit seabird risk assessment model. R package version 2.4.0, https://sefra-seabirds.github.io, https://github.com/sefra-seabirds/sefra.","code":"@Manual{,   title = {sefra: Spatially explicit seabird risk assessment model},   author = {Charles Edwards and Tom Peatman},   year = {2025},   note = {R package version 2.4.0, https://sefra-seabirds.github.io},   url = {https://github.com/sefra-seabirds/sefra}, }"},{"path":"https://sefra-seabirds.github.io/sefra/index.html","id":"sefra-seabird-risk-assessment-model","dir":"","previous_headings":"","what":"Spatially explicit seabird risk assessment model","title":"Spatially explicit seabird risk assessment model","text":"R package repository contains SEFRA-seabird risk assessment model code associated functions.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/index.html","id":"package-installation","dir":"","previous_headings":"","what":"Package installation","title":"Spatially explicit seabird risk assessment model","text":"install sefra package machine, recommend using following command: Please ensure Personal Access Token (PAT) updated allow access.","code":"Rscript -e \"remotes::install_github(repo = 'sefra-seabirds/sefra', build_vignettes = TRUE, dependencies = TRUE, auth_token = Sys.getenv('GITHUB_SEFRA_SEABIRDS_PAT'))\""},{"path":"https://sefra-seabirds.github.io/sefra/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://sefra-seabirds.github.io/sefra/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://sefra-seabirds.github.io/sefra/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://sefra-seabirds.github.io/sefra/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://sefra-seabirds.github.io/sefra/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://sefra-seabirds.github.io/sefra/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://sefra-seabirds.github.io/sefra/reference/adult_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Access or assign distribution parameters for \\(S^{opt}_s\\) — adult_survival","title":"Access or assign distribution parameters for \\(S^{opt}_s\\) — adult_survival","text":"function can used access assign distribution specifications 'optimal' adult survival per species (adult_survival) within sefraData object.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/adult_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access or assign distribution parameters for \\(S^{opt}_s\\) — adult_survival","text":"","code":"adult_survival(object, ...)  # S4 method for class 'sefraData' adult_survival(object)  adult_survival(object, ...) <- value  # S4 method for class 'sefraData,list' adult_survival(object) <- value"},{"path":"https://sefra-seabirds.github.io/sefra/reference/adult_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access or assign distribution parameters for \\(S^{opt}_s\\) — adult_survival","text":"object sefraData class object ... additional arguments generic function (used) value list data frame elements: code, distribution, par1 par2. code contain three-letter species code codes listed species. distribution must one 'uniform', 'beta' 'logit-normal' (see distributions). par1 par2 numeric values paramaterise distributions.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/adult_survival.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Access or assign distribution parameters for \\(S^{opt}_s\\) — adult_survival","text":"assignment values sefraData object, number elements per list item column must match number species contained object. codes match, assignment function return error. species codes distributions recognised, assignment function also return error.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/adult_survival.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access or assign distribution parameters for \\(S^{opt}_s\\) — adult_survival","text":"","code":"library(sefra) dat <- sefraData(c('DIW', 'DQS', 'TWD')) #> species codes input: including all possible capture codes #> constructed 'sefraData' object adult_survival(dat) <- list(code = c('DIW', 'DQS', 'TWD'),     distribution = c('beta', 'beta', 'logit-normal'), par1 = 1:3, par2 = 4:6) adult_survival(dat) #>     distribution par1 par2 #> DIW         beta    1    4 #> DQS         beta    2    5 #> TWD logit-normal    3    6"},{"path":"https://sefra-seabirds.github.io/sefra/reference/age_breeding.html","id":null,"dir":"Reference","previous_headings":"","what":"Access or assign distribution parameters for \\(A^{curr}_s\\) — age_breeding","title":"Access or assign distribution parameters for \\(A^{curr}_s\\) — age_breeding","text":"function can used access assign distribution specifications 'current' average age first breeding breeding per species (age_breeding) within sefraData object.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/age_breeding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access or assign distribution parameters for \\(A^{curr}_s\\) — age_breeding","text":"","code":"age_breeding(object, ...)  # S4 method for class 'sefraData' age_breeding(object)  age_breeding(object, ...) <- value  # S4 method for class 'sefraData,list' age_breeding(object) <- value"},{"path":"https://sefra-seabirds.github.io/sefra/reference/age_breeding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access or assign distribution parameters for \\(A^{curr}_s\\) — age_breeding","text":"object sefraData class object ... additional arguments generic function (used) value list data frame elements: code, distribution, par1 par2. code contain three-letter species code codes listed species. distribution must one 'uniform', 'beta', 'normal', 'log-normal' 'logit-normal' (see distributions). par1 par2 numeric values paramaterise distributions.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/age_breeding.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Access or assign distribution parameters for \\(A^{curr}_s\\) — age_breeding","text":"assignment values sefraData object, number elements per list item column must match number species contained object. codes match, assignment function return error. species codes distributions recognised, assignment function also return error.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/age_breeding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access or assign distribution parameters for \\(A^{curr}_s\\) — age_breeding","text":"","code":"library(sefra) dat <- sefraData(c('DIW', 'DQS', 'TWD')) #> species codes input: including all possible capture codes #> constructed 'sefraData' object age_breeding(dat) <- list(code = c('DIW', 'DQS', 'TWD'),     distribution = c('normal', 'normal', 'log-normal'), par1 = 1:3, par2 = 4:6) age_breeding(dat) #>     distribution par1 par2 #> DIW       normal    1    4 #> DQS       normal    2    5 #> TWD   log-normal    3    6"},{"path":"https://sefra-seabirds.github.io/sefra/reference/captures.html","id":null,"dir":"Reference","previous_headings":"","what":"Access capture data — captures","title":"Access capture data — captures","text":"function can used access capture data within sefraData object.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/captures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access capture data — captures","text":"","code":"captures(object, model_fit, ...)  # S4 method for class 'sefraData,ANY' captures(object)  # S4 method for class 'sefraData,stanfit' captures(object, model_fit)"},{"path":"https://sefra-seabirds.github.io/sefra/reference/captures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access capture data — captures","text":"object sefraData class object model_fit stanfit object containing MCMC samples. ... additional arguments generic function (used)","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/capture_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Access or assign capture codes — capture_codes","title":"Access or assign capture codes — capture_codes","text":"function can used access assign capture codes contained within sefraData object.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/capture_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access or assign capture codes — capture_codes","text":"","code":"capture_codes(object, ...)  # S4 method for class 'sefraData' capture_codes(object)  capture_codes(object, ...) <- value  # S4 method for class 'sefraData,character' capture_codes(object) <- value  # S4 method for class 'sefraData,data.frame' capture_codes(object) <- value  # S4 method for class 'sefraData' species_names(object)"},{"path":"https://sefra-seabirds.github.io/sefra/reference/capture_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access or assign capture codes — capture_codes","text":"object sefraData class object. ... additional arguments generic function (used). value character vector data frame containing capture codes.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/capture_codes.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Access or assign capture codes — capture_codes","text":"Capture codes (function argument value) match listed codes. , function return error.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/capture_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access or assign capture codes — capture_codes","text":"","code":"# assign character vector dat <- sefraData(c('DIW', 'DQS', 'TWD')) #> species codes input: including all possible capture codes #> constructed 'sefraData' object capture_codes(dat) <- c('BLZ') capture_codes(dat) #> 1 capture code: #> (empty captures data frame) #>    code id_code resolution id_resolution #> 1   BLZ      40    species             1 #> 2   BLZ      40    species             1 #> 3   BLZ      40    species             1 #> 4   BLZ      40    complex             2 #> 5   BLZ      40    complex             2 #> 6   BLZ      40    complex             2 #> 7   BLZ      40      genus             3 #> 8   BLZ      40      genus             3 #> 9   BLZ      40     family             4 #> 10  BLZ      40      class             5"},{"path":"https://sefra-seabirds.github.io/sefra/reference/capture_resolutions.html","id":null,"dir":"Reference","previous_headings":"","what":"Access captures per capture resolution — capture_resolutions","title":"Access captures per capture resolution — capture_resolutions","text":"Captures per capture resolution fishery group returned. function can used access capture code resolutions contained within sefraData object.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/capture_resolutions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access captures per capture resolution — capture_resolutions","text":"","code":"capture_resolutions(object, aggregate = TRUE, ...)  # S4 method for class 'sefraData' capture_resolutions(object, aggregate)"},{"path":"https://sefra-seabirds.github.io/sefra/reference/capture_resolutions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access captures per capture resolution — capture_resolutions","text":"object sefraData class object. aggregate logical value indicating whether captures aggregated code resolution. Defaults TRUE. Otherwise captures returned fishery group capture code. ... additional arguments generic function (used).","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/capture_resolutions.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Access captures per capture resolution — capture_resolutions","text":"Capture code resolutions listed code_resolution.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/capture_resolutions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access captures per capture resolution — capture_resolutions","text":"","code":"# assign character vector dat <- sefraData(c('DIW', 'DQS', 'TWD')) #> species codes input: including all possible capture codes #> constructed 'sefraData' object capture_resolutions(dat) #> 10 capture code resolutions: #> (empty captures data frame) #>    code id_code resolution id_resolution #> 1   DIW       1    species             1 #> 2   DQS       2    species             2 #> 3   TWD      13    species             3 #> 4   DGA      26    complex             4 #> 5   DST      29    complex             5 #> 6   DWC      32    complex             1 #> 7   DIZ      34      genus             2 #> 8   THZ      35      genus             3 #> 9   ALZ      38     family             4 #> 10  BLZ      40      class             5"},{"path":"https://sefra-seabirds.github.io/sefra/reference/codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Capture codes — codes","title":"Capture codes — codes","text":"Character vector three-letter codes used define captures. Species-specific capture codes correspond listed species. addition, codes exist captures defined species level. includes ad hoc species groups identification typically lower taxonomic resolution species, higher resolution genus. example, identifcation Buller's albatross, captures may distinguish northern southern species. Codes provided capture identified genus level, similarly captures identified belonging particular family. code also exists identification capture Class Aves, .e. bird. \"DIW\" - Gibson's albatross (Diomedea antipodensis gibsoni) \"DQS\" - Antipodean albatross (Diomedea antipodensis antipodensis) \"DIX\" - Wandering albatross (Diomedea exulans) \"DBN\" - Tristan albatross (Diomedea dabbenena) \"DAM\" - Amsterdam albatross (Diomedea amsterdamensis) \"DIP\" - Southern royal albatross (Diomedea epomophora) \"DIQ\" - Northern royal albatross (Diomedea sanfordi) \"DCR\" - Atlantic yellow-nosed albatross (Thalassarche chlororhynchos) \"TQH\" - Indian yellow-nosed albatross (Thalassarche carteri) \"DIM\" - Black-browed albatross (Thalassarche melanophris) \"TQW\" - Campbell black-browed albatross (Thalassarche impavida) \"DCU\" - Shy albatross (Thalassarche cauta) \"TWD\" - New Zealand white-capped albatross (Thalassarche cauta steadi) \"DKS\" - Salvin's albatross (Thalassarche salvini) \"DER\" - Chatham Island albatross (Thalassarche eremita) \"DIC\" - Grey-headed albatross (Thalassarche chrysostoma) \"DSB\" - Southern Buller's albatross (Thalassarche bulleri bulleri) \"DNB\" - Northern Buller's albatross (Thalassarche bulleri platei) \"PHU\" - Sooty albatross (Phoebetria fusca) \"PHE\" - Light-mantled sooty albatross (Phoebetria palpebrata) \"PCI\" - Grey petrel (Procellaria cinerea) \"PRK\" - Black petrel (Procellaria parkinsoni) \"PCW\" - Westland petrel (Procellaria westlandica) \"PRO\" - White-chinned petrel (Procellaria aequinoctialis) \"PCN\" - Spectacled petrel (Procellaria conspicillata) \"DGA\" - Gibson's Antipodean albatross (Diomedea antipodensis gibsoni D. antipodensis antipodensis) \"DRA\" - Royal albatrosses (Diomedea epomophora D. sanfordi) \"DYN\" - Yellow-nosed albatrosses (Thalassarche chlororhynchos T. carteri) \"DST\" - Shy-type albatross (Thalassarche cauta T. cauta steadi) \"DBB\" - Black-browed albatrosses (Thalassarche melanophris T. impavida) \"DIB\" - Buller's albatross (Thalassarche bulleri) \"DWC\" - Wandering albatross complex (Diomedea exulans, D. dabbenena, D. amsterdamensis, D. antipodensis gibsoni D. antipodensis antipodensis) \"PRZ\" - Petrel complex (Procellaria parkinsoni, P. westlandica P. aequinoctialis) \"DIZ\" - Diomedea spp. \"THZ\" - Thalassarche spp. \"PHZ\" - Phoebetria spp. \"PTZ\" - Procellaria spp. \"ALZ\" - Diomedeidae \"PRX\" - Procellariidae \"BLZ\" - Generic bird (class Aves)","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capture codes — codes","text":"","code":"codes"},{"path":[]},{"path":"https://sefra-seabirds.github.io/sefra/reference/code_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Code names — code_names","title":"Code names — code_names","text":"Data frame species code names.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/code_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Code names — code_names","text":"","code":"code_names"},{"path":[]},{"path":"https://sefra-seabirds.github.io/sefra/reference/code_resolution.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxonomic resolution per capture code — code_resolution","title":"Taxonomic resolution per capture code — code_resolution","text":"taxonomic resolution per capture code. Can one : species genus family complex class","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/code_resolution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxonomic resolution per capture code — code_resolution","text":"","code":"code_resolution"},{"path":"https://sefra-seabirds.github.io/sefra/reference/code_resolution.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Taxonomic resolution per capture code — code_resolution","text":"complex resolution refers species grouping higher resolution genus family. example, Buller's albatross, DIB species complex includes DSB DNB capture codes; .e. capture recorded DIB either two species.","code":""},{"path":[]},{"path":"https://sefra-seabirds.github.io/sefra/reference/cryptic_capture.html","id":null,"dir":"Reference","previous_headings":"","what":"Access or assign distribution for cryptic capture parameter \\(\\kappa\\) — cryptic_capture","title":"Access or assign distribution for cryptic capture parameter \\(\\kappa\\) — cryptic_capture","text":"function can used access assign distribution specifications longline cryptic capture multiplier (cryptic_capture) within sefraData object.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/cryptic_capture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access or assign distribution for cryptic capture parameter \\(\\kappa\\) — cryptic_capture","text":"","code":"cryptic_capture(object, ...)  # S4 method for class 'sefraData' cryptic_capture(object)  cryptic_capture(object, ...) <- value  # S4 method for class 'sefraData,list' cryptic_capture(object) <- value"},{"path":"https://sefra-seabirds.github.io/sefra/reference/cryptic_capture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access or assign distribution for cryptic capture parameter \\(\\kappa\\) — cryptic_capture","text":"object sefraData class object ... additional arguments generic function (used) value list data frame elements:  distribution, par1 par2. present assumed apply fishery species groups. distribution must 'log-normal' (see distributions). par1 par2 numeric values paramaterise distributions.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/cryptic_capture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access or assign distribution for cryptic capture parameter \\(\\kappa\\) — cryptic_capture","text":"","code":"dat <- sefraData(c('DIW', 'DQS', 'TWD')) #> species codes input: including all possible capture codes #> constructed 'sefraData' object fishery_groups(dat) <- c('F1', 'F2', 'F3') species_groups(dat) <- c('S1', 'S1', 'S2') #> Warning: assumption that vector of group names is ordered by species in object cryptic_capture(dat) <- list(distribution = c('log-normal'),     par1 = 0.1, par2 = 0.1) #> 3 fishery groups #> 2 species groups cryptic_capture(dat) #>    distribution fishery_group species_group  par value #> 1    log-normal            F1            S1 par1   0.1 #> 2    log-normal            F2            S1 par1   0.1 #> 3    log-normal            F3            S1 par1   0.1 #> 4    log-normal            F1            S2 par1   0.1 #> 5    log-normal            F2            S2 par1   0.1 #> 6    log-normal            F3            S2 par1   0.1 #> 7    log-normal            F1            S1 par2   0.1 #> 8    log-normal            F2            S1 par2   0.1 #> 9    log-normal            F3            S1 par2   0.1 #> 10   log-normal            F1            S2 par2   0.1 #> 11   log-normal            F2            S2 par2   0.1 #> 12   log-normal            F3            S2 par2   0.1"},{"path":"https://sefra-seabirds.github.io/sefra/reference/data_prep.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data for model run — data_prep","title":"Prepare data for model run — data_prep","text":"Overlap captures data prepared loaded sefraData object sefra model run. Captures overlap summed duplicate rows.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/data_prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data for model run — data_prep","text":"","code":"data_prep(object, data, ...)  # S4 method for class 'sefraData,data.frame' data_prep(object, data, ...)"},{"path":"https://sefra-seabirds.github.io/sefra/reference/data_prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data for model run — data_prep","text":"object sefraData object data Input data frame containing overlap data per species. ... Additional (optional) data frames containing captures overlap data.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/data_prep.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Prepare data for model run — data_prep","text":"preparing observer data, captures overlap provided function call. allows appropriate checks ensure data consistent. one overlap data frame provided, treated un-observed effort data.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/data_prep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare data for model run — data_prep","text":"","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union # create sefraData object dat <- sefraData(c('DIW', 'DQS', 'TWD')) #> species codes input: including all possible capture codes #> constructed 'sefraData' object # captures data.frame captures_dfr <- data.frame(n_captures = sample(0:1, 10, replace = TRUE),     year = sample(2000:2020, 10, replace = TRUE),     code = 'BLZ',     month = sample(month.abb, 10, replace = TRUE),     flag = sample(c('F1', 'F2'), 10, replace = TRUE)) captures_dfr <- data.frame(captures_dfr,     n_captures_alive = captures_dfr$n_captures,     n_captures_dead = 0) captures_dfr <- data.frame(captures_dfr, id_species_group = 1,     id_month = match(captures_dfr$month, sefra:::months),     id_fishery_group = match(captures_dfr$flag, c('F1', 'F2'))) # assign values fishery_groups(dat) <- captures_dfr fishery_groups(dat) #> 2 fishery groups #>   fishery_group id_fishery_group #> 1     fishery_1                1 #> 2     fishery_2                2 species_groups(dat) <- rep('group_1', 3) #> Warning: assumption that vector of group names is ordered by species in object species_groups(dat) #> 1 species group #>   species_group id_species_group #> 1       group_1                1 capture_codes(dat) <- captures_dfr capture_codes(dat) #> 1 capture code: #> (empty captures data frame) #>    code id_code resolution id_resolution #> 1   BLZ      40    species             1 #> 2   BLZ      40    species             1 #> 3   BLZ      40    species             1 #> 4   BLZ      40    complex             2 #> 5   BLZ      40    complex             2 #> 6   BLZ      40    complex             2 #> 7   BLZ      40      genus             3 #> 8   BLZ      40      genus             3 #> 9   BLZ      40     family             4 #> 10  BLZ      40      class             5 # separate overlap data frame overlap_dfr  <- captures_dfr %>% select(contains('id_')) %>%     mutate(cell = sample(1:1224, 10), year = sample(2000:2020, 10, replace = TRUE),     overlap = runif(10) / 1e3, species = sample(c('DIW', 'DQS', 'TWD'), 10, replace = TRUE)) # combined data frame combined_dfr <- captures_dfr %>%     mutate(cell = sample(1:1224, 10), overlap = runif(10) / 1e3,     species = sample(c('DIW', 'DQS', 'TWD'), 10, replace = TRUE)) # assume overlap is observed and # input separate data frames dat <- dat %>% data_prep(captures_dfr, overlap_dfr) #> Prepared observer captures and overlap data captures(dat) #> # A tibble: 3 × 6 #>   captures_k captures_live_k captures_dead_k code_k month_k fishery_group_k #>        <int>           <int>           <int>  <int>   <int>           <int> #> 1          1               1               0     40       2               1 #> 2          1               1               0     40      11               1 #> 3          1               1               0     40       2               2 overlap(dat) #> # A tibble: 10 × 5 #>    overlap_i species_i species_group_i month_i fishery_group_i #>        <dbl>     <int>           <int>   <int>           <int> #>  1 0.000480          1               1       4               1 #>  2 0.000528          1               1       5               1 #>  3 0.000601          1               1      12               2 #>  4 0.000401          2               1       3               1 #>  5 0.0000586         2               1      11               1 #>  6 0.000920          2               1       2               2 #>  7 0.000290          2               1       6               2 #>  8 0.000213          2               1       9               2 #>  9 0.000261         13               1       2               1 #> 10 0.000672         13               1       6               2 # assume data is observed and  # input as combined data frame dat <- dat %>% data_prep(combined_dfr) #> Prepared observer captures and overlap data captures(dat) #> # A tibble: 3 × 6 #>   captures_k captures_live_k captures_dead_k code_k month_k fishery_group_k #>        <int>           <int>           <int>  <int>   <int>           <int> #> 1          1               1               0     40       2               1 #> 2          1               1               0     40      11               1 #> 3          1               1               0     40       2               2 overlap(dat) #> # A tibble: 10 × 5 #>    overlap_i species_i species_group_i month_i fishery_group_i #>        <dbl>     <int>           <int>   <int>           <int> #>  1  0.000919         1               1       2               1 #>  2  0.000770         1               1       3               1 #>  3  0.000249         1               1       4               1 #>  4  0.000567         1               1       5               1 #>  5  0.000165         1               1      11               1 #>  6  0.000195         1               1       6               2 #>  7  0.000119         1               1       9               2 #>  8  0.000403         2               1       2               2 #>  9  0.000867        13               1       6               2 #> 10  0.000253        13               1      12               2 # assume data is not observed dat <- dat %>% data_prep(overlap_dfr) #> Prepared commercial (total) overlap data overlap(dat) #> $observer #> # A tibble: 10 × 5 #>    overlap_i species_i species_group_i month_i fishery_group_i #>        <dbl>     <int>           <int>   <int>           <int> #>  1  0.000919         1               1       2               1 #>  2  0.000770         1               1       3               1 #>  3  0.000249         1               1       4               1 #>  4  0.000567         1               1       5               1 #>  5  0.000165         1               1      11               1 #>  6  0.000195         1               1       6               2 #>  7  0.000119         1               1       9               2 #>  8  0.000403         2               1       2               2 #>  9  0.000867        13               1       6               2 #> 10  0.000253        13               1      12               2 #>  #> $fishery #> # A tibble: 10 × 5 #>    overlap_j species_j species_group_j month_j fishery_group_j #>        <dbl>     <int>           <int>   <int>           <int> #>  1 0.000480          1               1       4               1 #>  2 0.000528          1               1       5               1 #>  3 0.000601          1               1      12               2 #>  4 0.000401          2               1       3               1 #>  5 0.0000586         2               1      11               1 #>  6 0.000920          2               1       2               2 #>  7 0.000290          2               1       6               2 #>  8 0.000213          2               1       9               2 #>  9 0.000261         13               1       2               1 #> 10 0.000672         13               1       6               2 #>"},{"path":"https://sefra-seabirds.github.io/sefra/reference/distributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability distributions. — distributions","title":"Probability distributions. — distributions","text":"Character vector distributions recognised risk assessment model. Can one uniform, beta, normal, log-normal, logit-normal, gamma (parameterised using shape rate parameters) weibull.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/distributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability distributions. — distributions","text":"","code":"distributions"},{"path":"https://sefra-seabirds.github.io/sefra/reference/dot-distribution_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribution initial value — .distribution_init","title":"Distribution initial value — .distribution_init","text":"Utility function returning initial value per distribution type.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/dot-distribution_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribution initial value — .distribution_init","text":"","code":".distribution_init(x, par)"},{"path":"https://sefra-seabirds.github.io/sefra/reference/dot-distribution_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribution initial value — .distribution_init","text":"x Integer vector recognised distributions. 1 - uniform 2 - beta 3 - normal 4 - log-normal 5 - logit-normal 6 - gamma 7 - weibull par two-column matrix data frame containing parameters value x.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/dot-distribution_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distribution initial value — .distribution_init","text":"Returns vector initial values.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/dot-distribution_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribution type — .distribution_type","title":"Distribution type — .distribution_type","text":"Utility function specification distributions integer form.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/dot-distribution_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribution type — .distribution_type","text":"","code":".distribution_type(x)"},{"path":"https://sefra-seabirds.github.io/sefra/reference/dot-distribution_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribution type — .distribution_type","text":"x Character vector recognised distributions. 1 - uniform 2 - beta 3 - normal 4 - log-normal 5 - logit-normal 6 - gamma 7 - weibull","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/dot-distribution_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distribution type — .distribution_type","text":"Returns vector integer values.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/dot-Z1.html","id":null,"dir":"Reference","previous_headings":"","what":"Create linear matrix maps — .Z1","title":"Create linear matrix maps — .Z1","text":"Utility functions specification species--code code--code maps matrix form.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/dot-Z1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create linear matrix maps — .Z1","text":"","code":".Z1(id)"},{"path":"https://sefra-seabirds.github.io/sefra/reference/dot-Z1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create linear matrix maps — .Z1","text":"id integer vector species capture id codes.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/dot-Z1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create linear matrix maps — .Z1","text":"Returns list elements species_to_code, code_to_code, reduce_species reduce_codes.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/fishery_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Access or assign fishery groups — fishery_groups","title":"Access or assign fishery groups — fishery_groups","text":"function can used access assign fishery group labels contained within sefraData object.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/fishery_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access or assign fishery groups — fishery_groups","text":"","code":"fishery_groups(object, ...)  # S4 method for class 'sefraData' fishery_groups(object)  fishery_groups(object, ...) <- value  # S4 method for class 'sefraData,character' fishery_groups(object) <- value  # S4 method for class 'sefraData,data.frame' fishery_groups(object) <- value"},{"path":"https://sefra-seabirds.github.io/sefra/reference/fishery_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access or assign fishery groups — fishery_groups","text":"object sefraData class object. ... additional arguments generic function (used) value character vector data frame containing fishery group labels.","code":""},{"path":[]},{"path":"https://sefra-seabirds.github.io/sefra/reference/fishery_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access or assign fishery groups — fishery_groups","text":"","code":"# assign character vector dat <- sefraData(c('DIW', 'DQS', 'TWD')) #> species codes input: including all possible capture codes #> constructed 'sefraData' object fishery_groups(dat) <- c('flag1', 'flag2') fishery_groups(dat) #> 2 fishery groups #>   fishery_group id_fishery_group #> 1         flag1                1 #> 2         flag2                2 # assign data frame of overlap values dat <- sefraData(c('DIW', 'DQS', 'TWD')) #> species codes input: including all possible capture codes #> constructed 'sefraData' object fishery_groups(dat) <- data.frame(fishery_group = sample(c('fleet1', 'fleet2'), 10, replace = TRUE),     overlap = runif(10)) fishery_groups(dat) #> 2 fishery groups #>   fishery_group id_fishery_group #> 1        fleet1                1 #> 2        fleet2                2"},{"path":"https://sefra-seabirds.github.io/sefra/reference/get_rhat.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagnostic functions — get_rhat","title":"Diagnostic functions — get_rhat","text":"Takes input stanfit object call sampling extracts Rhat neff values.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/get_rhat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagnostic functions — get_rhat","text":"","code":"get_rhat(object, pars, ...)  plot_rhat(object, pars, labels, ...)  get_neff(object, pars, ...)  plot_neff(object, pars, labels, ...)"},{"path":"https://sefra-seabirds.github.io/sefra/reference/get_rhat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagnostic functions — get_rhat","text":"object output call sampling. pars character vector posterior parameter samples extracted. ... (used) labels vector parameter labels","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/get_rhat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diagnostic functions — get_rhat","text":"","code":"require(rstan) #> Loading required package: rstan #> Loading required package: StanHeaders #>  #> rstan version 2.32.7 (Stan version 2.32.2) #> For execution on a local, multicore CPU with excess RAM we recommend calling #> options(mc.cores = parallel::detectCores()). #> To avoid recompilation of unchanged Stan programs, we recommend calling #> rstan_options(auto_write = TRUE) #> For within-chain threading using `reduce_sum()` or `map_rect()` Stan functions, #> change `threads_per_chain` option: #> rstan_options(threads_per_chain = 1) #> Do not specify '-march=native' in 'LOCAL_CPPFLAGS' or a Makevars file  mdl <- \"data{ int n; vector[n] x; }      parameters{ real mu; }      model{ x ~ normal(mu, 1.0);}     generated quantities{ vector[n] x_sim; real x_sim_sum;     for (i in 1:n) x_sim[i] = normal_rng(mu, 1.0); x_sim_sum = sum(x_sim);}\\n\"   mdl <- stan_model(model_code = mdl) n = 20 x = rnorm(n, 0, 2)  mdl.fit <- sampling(mdl, data = list(n = n, x = x),     init = function() list(mu = 0), chains = 1) #>  #> SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1.1e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.11 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.008 seconds (Warm-up) #> Chain 1:                0.009 seconds (Sampling) #> Chain 1:                0.017 seconds (Total) #> Chain 1:   get_rhat(mdl.fit, pars = \"mu\") #>   parameter    value rating #> 1        mu 1.000061   Good get_neff(mdl.fit, pars = \"mu\") #>   parameter    n     neff     value   rating #> 1        mu 1000 356.9613 0.3569613 Moderate"},{"path":"https://sefra-seabirds.github.io/sefra/reference/initial_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve list of initial values — initial_values","title":"Retrieve list of initial values — initial_values","text":"Returns list initial values estimated parameters based prior distributions specified sefraData object.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/initial_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve list of initial values — initial_values","text":"","code":"initial_values(object, model, ...)  # S4 method for class 'sefraData,ANY' initial_values(object)  # S4 method for class 'sefraData,stanmodel' initial_values(object, model, ...)"},{"path":"https://sefra-seabirds.github.io/sefra/reference/initial_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve list of initial values — initial_values","text":"object sefraData object. model optional stanmodel object. supplied, initial values obtained MPD fit. ... arguments optimizing initial model fit required.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/model_def.html","id":null,"dir":"Reference","previous_headings":"","what":"Model definition — model_def","title":"Model definition — model_def","text":"Utility function returning model code. See sefra details.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/model_def.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model definition — model_def","text":"","code":"model_def(data, likelihood)"},{"path":"https://sefra-seabirds.github.io/sefra/reference/model_def.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model definition — model_def","text":"data List data inputs. likelihood Assumed likelihood function.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/months.html","id":null,"dir":"Reference","previous_headings":"","what":"Months — months","title":"Months — months","text":"Character vector months used risk assessment model, equivalent month.abb.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/months.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Months — months","text":"","code":"months"},{"path":"https://sefra-seabirds.github.io/sefra/reference/n_breeding_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Access or assign distribution parameters for \\(N^{BP}_s\\) — n_breeding_pairs","title":"Access or assign distribution parameters for \\(N^{BP}_s\\) — n_breeding_pairs","text":"function can used access assign distribution specifications number breeding pairs per species (n_breeding_pairs) within sefraData object.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/n_breeding_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access or assign distribution parameters for \\(N^{BP}_s\\) — n_breeding_pairs","text":"","code":"n_breeding_pairs(object, ...)  # S4 method for class 'sefraData' n_breeding_pairs(object)  n_breeding_pairs(object, ...) <- value  # S4 method for class 'sefraData,list' n_breeding_pairs(object) <- value"},{"path":"https://sefra-seabirds.github.io/sefra/reference/n_breeding_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access or assign distribution parameters for \\(N^{BP}_s\\) — n_breeding_pairs","text":"object sefraData class object ... additional arguments generic function (used) value list data frame elements: code, distribution, par1 par2. code contain three-letter species code codes listed species. distribution must one 'uniform', 'beta', 'normal', 'log-normal' 'logit-normal' (see distributions). par1 par2 numeric values paramaterise distributions.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/n_breeding_pairs.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Access or assign distribution parameters for \\(N^{BP}_s\\) — n_breeding_pairs","text":"assignment values sefraData object, number elements per list item column must match number species contained object. codes match, assignment function return error. species codes distributions recognised, assignment function also return error.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/n_breeding_pairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access or assign distribution parameters for \\(N^{BP}_s\\) — n_breeding_pairs","text":"","code":"library(sefra) dat <- sefraData(c('DIW', 'DQS', 'TWD')) #> species codes input: including all possible capture codes #> constructed 'sefraData' object n_breeding_pairs(dat) <- list(code = c('DIW', 'DQS', 'TWD'),     distribution = c('uniform', 'uniform', 'uniform'), par1 = 1:3, par2 = 4:6) n_breeding_pairs(dat) #>     distribution par1 par2 #> DIW      uniform    1    4 #> DQS      uniform    2    5 #> TWD      uniform    3    6"},{"path":"https://sefra-seabirds.github.io/sefra/reference/overlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Access overlap data — overlap","title":"Access overlap data — overlap","text":"function can used access observer (total) fishery overlap data within sefraData object.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/overlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access overlap data — overlap","text":"","code":"overlap(object, ...)  # S4 method for class 'sefraData' overlap(object, type = \"both\")"},{"path":"https://sefra-seabirds.github.io/sefra/reference/overlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access overlap data — overlap","text":"object sefraData class object ... additional arguments generic function (used) type one 'observer', 'fishery' '', identify overlap data access.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/phi.html","id":null,"dir":"Reference","previous_headings":"","what":"Access or assign phi parameter — phi","title":"Access or assign phi parameter — phi","text":"function can used access assign phi parameter sefraData object.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/phi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access or assign phi parameter — phi","text":"","code":"phi(object, ...)  # S4 method for class 'sefraData' phi(object)  phi(object, ...) <- value  # S4 method for class 'sefraData,numeric' phi(object) <- value"},{"path":"https://sefra-seabirds.github.io/sefra/reference/phi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access or assign phi parameter — phi","text":"object sefraData class object ... additional arguments generic function value numeric value specifying value phi","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/plot_prior_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot prior updates from sefra model run — plot_prior_update","title":"Plot prior updates from sefra model run — plot_prior_update","text":"Biological prior updates plotted paired box-plots.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/plot_prior_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot prior updates from sefra model run — plot_prior_update","text":"","code":"plot_prior_update(object, par, ...)  # S3 method for class 'stanfit' plot_prior_update(object, par, labels, transform = FALSE, ...)"},{"path":"https://sefra-seabirds.github.io/sefra/reference/plot_prior_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot prior updates from sefra model run — plot_prior_update","text":"object stanfit object. par biological parameter. Can one n_breeding_pairs, adult_survival, p_breeding age_breeding. ... (used) labels character vector species labels codes transform logical indicating whether transform onto log-10 scale","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/posterior.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract posterior density — posterior","title":"Extract posterior density — posterior","text":"Takes input stanfit object call sampling extracts posterior functions thereof.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/posterior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract posterior density — posterior","text":"","code":"posterior(object, pars, ...)  # S3 method for class 'stanfit' posterior(object, pars, dim.names, fun = \"\", melt = FALSE, ...)"},{"path":"https://sefra-seabirds.github.io/sefra/reference/posterior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract posterior density — posterior","text":"object output call sampling. pars character vector posterior parameter samples extracted. ... additional arguments function dim.names optional list named lists containing dimension names parameter. single list(list()) entry given applied parameters. parameters need provided dimension names. fun one either \"mean\", \"median\", \"quantile\" \"summary\", calculated across iterations supplied. melt logical value indicating whether output arrays converted long format using rehape2::melt.array()","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/posterior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract posterior density — posterior","text":"Returns list posterior samples parameter. melt = TRUE returned data.frames, otherwise arrays. fun specificed output summarised across iterations.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/posterior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract posterior density — posterior","text":"","code":"require(rstan)  mdl <- \"data{ int n; vector[n] x; }      parameters{ real mu; }      model{ x ~ normal(mu, 1.0);}     generated quantities{ vector[n] x_sim; real x_sim_sum;     for (i in 1:n) x_sim[i] = normal_rng(mu, 1.0); x_sim_sum = sum(x_sim);}\\n\"   mdl <- stan_model(model_code = mdl) n = 20 x = rnorm(n, 0, 2)  mdl.fit <- sampling(mdl, data = list(n = n, x = x),     init = function() list(mu = 0), chains = 1) #>  #> SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.1 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.007 seconds (Warm-up) #> Chain 1:                0.01 seconds (Sampling) #> Chain 1:                0.017 seconds (Total) #> Chain 1:   posterior(mdl.fit, pars = c(\"mu\", \"x_sim\", \"x_sim_sum\"), fun = \"summarise\") #> $mu #>        hat        med     low_ci     upp_ci  #> -0.1000440 -0.1015303 -0.4890429  0.3159461  #>  #> $x_sim #>          #>                  [,1]        [,2]        [,3]       [,4]        [,5] #>   hat    -0.040870768 -0.07267507 -0.08056306 -0.1324895 -0.08844662 #>   med     0.004099512 -0.11395648 -0.08379635 -0.1034256 -0.08566050 #>   low_ci -2.139257438 -2.00818590 -2.05792114 -2.1225715 -2.10293677 #>   upp_ci  2.075696303  1.93319524  1.93511500  1.7202727  1.80936471 #>          #>                 [,6]        [,7]       [,8]       [,9]       [,10]      [,11] #>   hat    -0.06516031 -0.08709333 -0.1027110 -0.1566360 -0.06367040 -0.1294932 #>   med    -0.02878040 -0.04817707 -0.1567527 -0.1582803 -0.08413235 -0.1226976 #>   low_ci -1.96188720 -2.09176468 -1.9753424 -2.1527482 -2.11390318 -2.1130901 #>   upp_ci  1.85577910  1.80516785  1.9547406  1.7753191  2.01880935  1.7738193 #>          #>               [,12]       [,13]       [,14]       [,15]      [,16]       [,17] #>   hat    -0.1176812 -0.10351678 -0.10487195 -0.09330567 -0.1464948 -0.09118370 #>   med    -0.1168339 -0.09927069 -0.08783777 -0.08972270 -0.1519127 -0.05868084 #>   low_ci -2.1217656 -2.04986272 -1.95815226 -1.99440008 -2.1202363 -2.08132506 #>   upp_ci  1.9602327  1.82948635  1.80971402  1.95663810  1.7700777  1.90184681 #>          #>                [,18]       [,19]      [,20] #>   hat    -0.09467418 -0.11084516 -0.1394361 #>   med    -0.06840261 -0.07629506 -0.1818249 #>   low_ci -2.14364027 -2.11625492 -2.0611275 #>   upp_ci  1.78071107  1.70116932  1.8459813 #>  #> $x_sim_sum #>        hat        med     low_ci     upp_ci  #>  -2.021819  -2.066421 -13.713997   9.700981  #>"},{"path":"https://sefra-seabirds.github.io/sefra/reference/print_code_to_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Print linear matrix maps — print_code_to_code","title":"Print linear matrix maps — print_code_to_code","text":"Utility function printing species--code code--code maps matrix form.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/print_code_to_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print linear matrix maps — print_code_to_code","text":"","code":"print_code_to_code(x, margin = 1)"},{"path":"https://sefra-seabirds.github.io/sefra/reference/print_code_to_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print linear matrix maps — print_code_to_code","text":"x data object class sefraData. margin integer indicating whether print rows (margin = 1) columns (margin = 2).","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/print_code_to_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print linear matrix maps — print_code_to_code","text":"prints matrix object","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/p_breeding.html","id":null,"dir":"Reference","previous_headings":"","what":"Access or assign distribution parameters for \\(P^{B}_s\\) — p_breeding","title":"Access or assign distribution parameters for \\(P^{B}_s\\) — p_breeding","text":"function can used access assign distribution specifications average annual probability adult breeding (p_breeding) within sefraData object.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/p_breeding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access or assign distribution parameters for \\(P^{B}_s\\) — p_breeding","text":"","code":"p_breeding(object, ...)  # S4 method for class 'sefraData' p_breeding(object)  p_breeding(object, ...) <- value  # S4 method for class 'sefraData,list' p_breeding(object) <- value"},{"path":"https://sefra-seabirds.github.io/sefra/reference/p_breeding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access or assign distribution parameters for \\(P^{B}_s\\) — p_breeding","text":"object sefraData class object ... additional arguments generic function (used) value list data frame elements: code, distribution, par1 par2. code contain three-letter species code codes listed species. distribution must one 'uniform', 'beta' 'logit-normal' (see distributions). par1 par2 numeric values paramaterise distributions.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/p_breeding.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Access or assign distribution parameters for \\(P^{B}_s\\) — p_breeding","text":"assignment values sefraData object, number elements per list item column must match number species contained object. codes match, assignment function return error. species codes distributions recognised, assignment function also return error.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/p_breeding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access or assign distribution parameters for \\(P^{B}_s\\) — p_breeding","text":"","code":"library(sefra) dat <- sefraData(c('DIW', 'DQS', 'TWD')) #> species codes input: including all possible capture codes #> constructed 'sefraData' object p_breeding(dat) <- list(code = c('DIW', 'DQS', 'TWD'),     distribution = c('uniform', 'beta', 'beta'), par1 = 1:3, par2 = 4:6) p_breeding(dat) #>     distribution par1 par2 #> DIW      uniform    1    4 #> DQS         beta    2    5 #> TWD         beta    3    6"},{"path":"https://sefra-seabirds.github.io/sefra/reference/p_nest.html","id":null,"dir":"Reference","previous_headings":"","what":"Access or assign distribution parameters for \\(P^{nest}_{s,m}\\) — p_nest","title":"Access or assign distribution parameters for \\(P^{nest}_{s,m}\\) — p_nest","text":"function can used access assign distribution specifications probability breeding adult nest per month per species (p_nest) within sefraData object.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/p_nest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access or assign distribution parameters for \\(P^{nest}_{s,m}\\) — p_nest","text":"","code":"p_nest(object, ...)  # S4 method for class 'sefraData' p_nest(object)  p_nest(object, ...) <- value  # S4 method for class 'sefraData,array' p_nest(object) <- value"},{"path":"https://sefra-seabirds.github.io/sefra/reference/p_nest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access or assign distribution parameters for \\(P^{nest}_{s,m}\\) — p_nest","text":"object sefraData class object ... additional arguments generic function (used) value array containing fixed probability values \\(0 \\leq x \\leq 1\\).  array twelve columns labelled using abbreviated months. row names contain three-letter species code codes listed species.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/p_nest.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Access or assign distribution parameters for \\(P^{nest}_{s,m}\\) — p_nest","text":"assignment values sefraData object, species codes included row names array checked ensure match species contained object. codes match, assignment function return error.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/p_nest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access or assign distribution parameters for \\(P^{nest}_{s,m}\\) — p_nest","text":"","code":"library(sefra) dat <- sefraData(c('DIW', 'DQS', 'TWD')) #> species codes input: including all possible capture codes #> constructed 'sefraData' object p_nest(dat) <- array(runif(36), dim = c(3, 12),     dimnames = list(c('DIW', 'DQS', 'TWD'), sefra::months)) p_nest(dat) #>           Jan       Feb        Mar       Apr       May       Jun        Jul #> DIW 0.7371746 0.5304509 0.02747746 0.9034353 0.9449576 0.7745848 0.07364704 #> DQS 0.6583407 0.4328554 0.82490547 0.1324764 0.1230143 0.9414065 0.88938837 #> TWD 0.2814549 0.9171792 0.06248207 0.6285138 0.2611497 0.8628721 0.21432498 #>           Aug       Sep       Oct       Nov       Dec #> DIW 0.3386186 0.6560942 0.4249382 0.9456628 0.8868039 #> DQS 0.3069618 0.8393423 0.2810709 0.5695967 0.3033264 #> TWD 0.2535781 0.8343246 0.3579374 0.5893889 0.6277545"},{"path":"https://sefra-seabirds.github.io/sefra/reference/p_southern.html","id":null,"dir":"Reference","previous_headings":"","what":"Access or assign distribution parameters for \\(P^{SH}_{s,m}\\) — p_southern","title":"Access or assign distribution parameters for \\(P^{SH}_{s,m}\\) — p_southern","text":"function can used access assign distribution specifications probability adult southern hemisphere per month per species (p_southern) within sefraData object.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/p_southern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access or assign distribution parameters for \\(P^{SH}_{s,m}\\) — p_southern","text":"","code":"p_southern(object, ...)  # S4 method for class 'sefraData' p_southern(object)  p_southern(object, ...) <- value  # S4 method for class 'sefraData,array' p_southern(object) <- value"},{"path":"https://sefra-seabirds.github.io/sefra/reference/p_southern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access or assign distribution parameters for \\(P^{SH}_{s,m}\\) — p_southern","text":"object sefraData class object ... additional arguments generic function (used) value array containing fixed probability values \\(0 \\leq x \\leq 1\\).  array twelve columns labelled using abbreviated months. row names contain three-letter species code codes listed species.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/p_southern.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Access or assign distribution parameters for \\(P^{SH}_{s,m}\\) — p_southern","text":"assignment values sefraData object, species codes included row names array checked ensure match species contained object. codes match, assignment function return error.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/p_southern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access or assign distribution parameters for \\(P^{SH}_{s,m}\\) — p_southern","text":"","code":"library(sefra) dat <- sefraData(c('DIW', 'DQS', 'TWD')) #> species codes input: including all possible capture codes #> constructed 'sefraData' object p_southern(dat) <- array(runif(36), dim = c(3, 12),     dimnames = list(c('DIW', 'DQS', 'TWD'), sefra::months)) p_southern(dat) #>           Jan       Feb       Mar       Apr        May       Jun       Jul #> DIW 0.2050299 0.5135518 0.6194597 0.8791888 0.79507449 0.1695039 0.3568284 #> DQS 0.4564192 0.4627568 0.6955591 0.4046568 0.70878502 0.5372473 0.5364571 #> TWD 0.6309669 0.1117470 0.3168564 0.6347836 0.05989639 0.6206394 0.4485171 #>           Aug       Sep       Oct       Nov       Dec #> DIW 0.1745433 0.2796206 0.3275860 0.5293588 0.9925204 #> DQS 0.6582881 0.6306955 0.3937545 0.8433471 0.7089872 #> TWD 0.9716602 0.4233033 0.6319949 0.6395425 0.7534121"},{"path":"https://sefra-seabirds.github.io/sefra/reference/sefra.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract and compile sefra seabird model — sefra","title":"Extract and compile sefra seabird model — sefra","text":"call function source compile latest version southern hemisphere seabird risk assessment model. model written stan can run using sampling function rstan package.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/sefra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract and compile sefra seabird model — sefra","text":"","code":"sefra(   data,   write_to = NULL,   read_from = NULL,   likelihood = c(\"cumulative\", \"empirical\")[1] )"},{"path":"https://sefra-seabirds.github.io/sefra/reference/sefra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract and compile sefra seabird model — sefra","text":"data list data inputs. See sefraData. write_to Write model code file. read_from Read model code file. likelihood Fit either cumulative empirical captures.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/sefra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract and compile sefra seabird model — sefra","text":"","code":"dat <- sefraData(c('DIQ')) #> species codes input: including all possible capture codes #> Error in 1:ncol(a): argument of length 0 mdl <- sefra(dat) #> Error: object 'dat' not found"},{"path":"https://sefra-seabirds.github.io/sefra/reference/sefraData-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class containing input data for model run — sefraData-class","title":"Class containing input data for model run — sefraData-class","text":"S4 object extends list base type. represents object suitable input sefra model run.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/sefraData-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class containing input data for model run — sefraData-class","text":"","code":"sefraData(x, name, ...)"},{"path":"https://sefra-seabirds.github.io/sefra/reference/sefraData-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class containing input data for model run — sefraData-class","text":"x character vector species codes (must one (species)). name optional character argument identify data. useful conducting multipler model runs different data sets. identifier correspond complete set data, .e. changes data stored sefraData object result new identifier. ... additional function arguments (used).","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/sefraData-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class containing input data for model run — sefraData-class","text":"list containing following information. Identifier: name Data definition e.g. 'reference' Dimensions structural data: species Ordered character vector species codes (species). codes Ordered character vector capture codes (codes). species_names Data frame species names. species_groups Character vector species groups. fishery_groups Character vector fishery groups. id_species Integer vector species id values 1 25. id_codes Integer vector capture code id values 1 40. id_species_groups Integer vector species group id values. id_fishery_groups Integer vector fishery group id values. n_species Number species risk assessment. n_codes Number capture codes risk assessment. n_species_groups Number species groups. n_fishery_groups Number fishery groups. Mapping matrices: species_to_code Map species codes capture codes. code_to_code Map captures codes capture codes. Look-vectors: code_resolution Taxonomic resolution per code reduce_species Reduction full list species list used risk assessment. reduce_codes Reduction full list capture codes list used risk assessment. Cryptic capture multipliers: cryptic_capture_type Distribution longline cryptic capture multiplier per species group fishery group. Currently log-normal distribution allowed. cryptic_capture_par Distribution parameters longline cryptic capture multipliers. Biological data: n_breeding_pairs_type n_breeding_pairs_par Distribution type parameters number breeding pairs per species \\(N^{BP}_s\\). adult_survival_type adult_survival_par Distribution type parameters optimum adult survival per species \\(S^{opt}_s\\). p_breeding_type p_breeding_par Distribution type parameters probability breeding per species \\(P^{B}_s\\). age_breeding_type age_breeding_par Distribution type parameters age first breeding per species \\(^{curr}_s\\). p_nest Probability nest per species per month. p_southern Probability southern hemisphere per species per month. Captures data frame: n_k Number records. month_k Month id per record. code_k Capture code id per record. fishery_group_k Fishery group id per record. captures_k Number captures per record. captures_live_k Number live captures. n_year_k Number years capture data. Observed overlap data frame: n_i Number records. month_i Month id per record. species_i Species id per record. species_group_i Species group id per record. fishery_group_i Fishery group id per record. overlap_i Overlap per record. n_year_i Number years observed overlap data. n_j Number records. month_j Month id per record. cell_j Cell id per record. species_j Species id per record. species_group_j Species group id per record. fishery_group_j Fishery group id per record. overlap_j Overlap per record. n_year_j Number years commercial overlap data. Tuning: phi PST tuning parameter.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/sefraData-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class containing input data for model run — sefraData-class","text":".Data list containing input data names names list item","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/sefraData-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Class containing input data for model run — sefraData-class","text":"Species codes (function argument x) match listed species. , function return error.","code":""},{"path":[]},{"path":"https://sefra-seabirds.github.io/sefra/reference/sefraData-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class containing input data for model run — sefraData-class","text":"","code":"# create data object with all contributing species for DGA and DWC capture codes dat <- sefraData(c(\"DGA\", \"DWC\")) #> capture codes input: including all contributing species #> constructed 'sefraData' object species_names(dat) #> Species #>   code          common_name                    scientific_name    genus #> 1  DIW   Gibson's albatross      Diomedea antipodensis gibsoni Diomedea #> 2  DQS Antipodean albatross Diomedea antipodensis antipodensis Diomedea #> 3  DIX  Wandering albatross                   Diomedea exulans Diomedea #> 4  DBN    Tristan albatross                 Diomedea dabbenena Diomedea #> 5  DAM  Amsterdam albatross            Diomedea amsterdamensis Diomedea #>        family code_resolution id_species #> 1 Diomedeidae         species          1 #> 2 Diomedeidae         species          2 #> 3 Diomedeidae         species          3 #> 4 Diomedeidae         species          4 #> 5 Diomedeidae         species          5 capture_codes(dat) #> 2 capture codes: #> (empty captures data frame) #>   code id_code resolution id_resolution #> 1  DGA      26    complex             2 #> 2  DWC      32    complex             2 # create data object with all possible capture codes for DIW and DQS species dat <- sefraData(c(\"DIW\", \"DQS\")) #> species codes input: including all possible capture codes #> constructed 'sefraData' object species_names(dat) #> Species #>   code          common_name                    scientific_name    genus #> 1  DIW   Gibson's albatross      Diomedea antipodensis gibsoni Diomedea #> 2  DQS Antipodean albatross Diomedea antipodensis antipodensis Diomedea #>        family code_resolution id_species #> 1 Diomedeidae         species          1 #> 2 Diomedeidae         species          2 capture_codes(dat) #> 7 capture codes: #> (empty captures data frame) #>   code id_code resolution id_resolution #> 1  DIW       1    species             1 #> 2  DQS       2    species             1 #> 3  DGA      26    complex             2 #> 4  DWC      32    complex             2 #> 5  DIZ      34      genus             3 #> 6  ALZ      38     family             4 #> 7  BLZ      40      class             5"},{"path":"https://sefra-seabirds.github.io/sefra/reference/sefraOutputs-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class containing outputs from model run — sefraOutputs-class","title":"Class containing outputs from model run — sefraOutputs-class","text":"S4 object extends list base type. returns object containing outputs sefra model run suitable plotting.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/sefraOutputs-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class containing outputs from model run — sefraOutputs-class","text":"","code":"sefraOutputs(object, model_fit, ...)  # S4 method for class 'sefraData,stanfit' sefraOutputs(object, model_fit, ...)"},{"path":"https://sefra-seabirds.github.io/sefra/reference/sefraOutputs-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class containing outputs from model run — sefraOutputs-class","text":"object sefraData object. model_fit stanfit object containing MCMC samples. ... additional function arguments (used).","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/sefraOutputs-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class containing outputs from model run — sefraOutputs-class","text":".Data list containing input data names names list item identifier Definition data used model run. species Ordered character vector species codes. species_names Data frame species names. Capture data: captures Empirical (*_emp), expected (*_hat) posterior predicted (*_sim) captures. captures_live Empirical (*_emp), expected (*_hat) posterior predicted (*_sim) live captures. Observation probabilities: p_obs_logit Estimated observation probability parameter. p_obs Empirical observation probabilities p_obs_cde cumulative sum p_obs_sum, per fishery group, species capture code. Predicted fishery interactions: predicted_overlap Model predicted density overlap per species fishery group. predicted_deaths Model predicted deaths per species fishery group. predicted_cryptic_deaths Model predicted cryptic deaths per species fishery group. map_overlap Model predicted overlap per species, cell fishery group. map_deaths Model predicted deaths per species, cell fishery group. Risk metrics per species: r Maximum intrinsic growth. PST PST reference point. risk_ratio Risk ratio. rel_mort Relative mortality ratio. pop_status Population status equilibrium.","code":""},{"path":[]},{"path":"https://sefra-seabirds.github.io/sefra/reference/species.html","id":null,"dir":"Reference","previous_headings":"","what":"Species codes — species","title":"Species codes — species","text":"Character vector three-letter species codes used define biological input data. Currently available species codes inclusion risk assessment : \"DIW\" - Gibson's albatross (Diomedea antipodensis gibsoni) \"DQS\" - Antipodean albatross (Diomedea antipodensis antipodensis) \"DIX\" - Wandering albatross (Diomedea exulans) \"DBN\" - Tristan albatross (Diomedea dabbenena) \"DAM\" - Amsterdam albatross (Diomedea amsterdamensis) \"DIP\" - Southern royal albatross (Diomedea epomophora) \"DIQ\" - Northern royal albatross (Diomedea sanfordi) \"DCR\" - Atlantic yellow-nosed albatross (Thalassarche chlororhynchos) \"TQH\" - Indian yellow-nosed albatross (Thalassarche carteri) \"DIM\" - Black-browed albatross (Thalassarche melanophris) \"TQW\" - Campbell black-browed albatross (Thalassarche impavida) \"DCU\" - Shy albatross (Thalassarche cauta) \"TWD\" - New Zealand white-capped albatross (Thalassarche cauta steadi) \"DKS\" - Salvin's albatross (Thalassarche salvini) \"DER\" - Chatham Island albatross (Thalassarche eremita) \"DIC\" - Grey-headed albatross (Thalassarche chrysostoma) \"DSB\" - Southern Buller's albatross (Thalassarche bulleri bulleri) \"DNB\" - Northern Buller's albatross (Thalassarche bulleri platei) \"PHU\" - Sooty albatross (Phoebetria fusca) \"PHE\" - Light-mantled sooty albatross (Phoebetria palpebrata) \"PCI\" - Grey petrel (Procellaria cinerea) \"PRK\" - Black petrel (Procellaria parkinsoni) \"PCW\" - Westland petrel (Procellaria westlandica) \"PRO\" - White-chinned petrel (Procellaria aequinoctialis) \"PCN\" - Spectacled petrel (Procellaria conspicillata)","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Species codes — species","text":"","code":"species"},{"path":"https://sefra-seabirds.github.io/sefra/reference/species.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Species codes — species","text":"species codes (subset thereof) required argument constructing sefraData object.","code":""},{"path":[]},{"path":"https://sefra-seabirds.github.io/sefra/reference/species_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Access or assign species groups — species_groups","title":"Access or assign species groups — species_groups","text":"function can used access assign species group labels contained within sefraData object.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/species_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access or assign species groups — species_groups","text":"","code":"species_groups(object, ...)  # S4 method for class 'sefraData' species_groups(object, print_species = FALSE)  species_groups(object, ...) <- value  # S4 method for class 'sefraData,character' species_groups(object) <- value  # S4 method for class 'sefraData,data.frame' species_groups(object) <- value"},{"path":"https://sefra-seabirds.github.io/sefra/reference/species_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access or assign species groups — species_groups","text":"object sefraData class object. ... additional arguments generic function (used) print_species logical indicating whether print species associated species group. value character vector species group labels equal length number species. may require elements duplicated.","code":""},{"path":[]},{"path":"https://sefra-seabirds.github.io/sefra/reference/species_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access or assign species groups — species_groups","text":"","code":"# input vector of species groups per species dat <- sefraData(c('DIW', 'DQS', 'TWD')) #> species codes input: including all possible capture codes #> constructed 'sefraData' object species_groups(dat) <- c('group1', 'group1', 'group2') #> Warning: assumption that vector of group names is ordered by species in object species_groups(dat) #> 2 species groups #>   species_group id_species_group #> 1        group1                1 #> 2        group2                2 # input data frame dat <- sefraData(c('DIW', 'DQS', 'TWD')) #> species codes input: including all possible capture codes #> constructed 'sefraData' object species_groups(dat) <- data.frame(species = c('DQS', 'TWD', 'TWD', 'DIW'),     species_group = c('groupB', 'groupA', 'groupA', 'groupB')) species_groups(dat) #> 2 species groups #>   species_group id_species_group #> 1        groupB                1 #> 2        groupA                2"},{"path":"https://sefra-seabirds.github.io/sefra/reference/species_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Access species_names in sefraData object — species_names","title":"Access species_names in sefraData object — species_names","text":"function can used access access species names contained within sefraData object.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/species_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access species_names in sefraData object — species_names","text":"","code":"species_names(object, ...)"},{"path":"https://sefra-seabirds.github.io/sefra/reference/species_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access species_names in sefraData object — species_names","text":"object sefraData class object. ... additional arguments generic function (used)","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/species_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access species_names in sefraData object — species_names","text":"","code":"# assign character vector dat <- sefraData(c('DIW', 'DQS', 'TWD')) #> species codes input: including all possible capture codes #> constructed 'sefraData' object species_names(dat) #> Species #>    code                        common_name                    scientific_name #> 1   DIW                 Gibson's albatross      Diomedea antipodensis gibsoni #> 2   DQS               Antipodean albatross Diomedea antipodensis antipodensis #> 13  TWD New Zealand white-capped albatross          Thalassarche cauta steadi #>           genus      family code_resolution id_species #> 1      Diomedea Diomedeidae         species          1 #> 2      Diomedea Diomedeidae         species          2 #> 13 Thalassarche Diomedeidae         species         13"},{"path":"https://sefra-seabirds.github.io/sefra/reference/summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise model outputs — summary,sefraOutputs-method","title":"Summarise model outputs — summary,sefraOutputs-method","text":"Summarise model outputs contained sefraOutputs object. Posterior mean quantile values calculated across iterations: mean - mean mq   - median quantile lq   - lower 95% quantile   - upper 95% quantile Prefixes used identify type data: emp - empirical (observed) value hat - expected value sim - value simulated using posterior prediction","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise model outputs — summary,sefraOutputs-method","text":"","code":"# S4 method for class 'sefraOutputs' summary(object, ...)"},{"path":"https://sefra-seabirds.github.io/sefra/reference/summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise model outputs — summary,sefraOutputs-method","text":"object object class sefraOutputs. ... generic function argument (used)","code":""},{"path":[]},{"path":"https://sefra-seabirds.github.io/sefra/reference/to_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce to integer — to_integer","title":"Coerce to integer — to_integer","text":"Coerce character factor integer values","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/to_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to integer — to_integer","text":"","code":"to_integer(x, unique = FALSE, ordered = FALSE)"},{"path":"https://sefra-seabirds.github.io/sefra/reference/to_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to integer — to_integer","text":"x input vector unique unique values returned? ordered values ordered (lowest highest)?","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/to_integer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce to integer — to_integer","text":"","code":"x <- c('1', '3', '5', '2', '5') to_integer(x) #> [1] 1 3 5 2 5 to_integer(x, unique = TRUE) #> [1] 1 3 5 2 to_integer(x, unique = TRUE, ordered = TRUE) #> [1] 1 2 3 5"},{"path":"https://sefra-seabirds.github.io/sefra/reference/trace_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot MCMC sample traces — trace_plot","title":"Plot MCMC sample traces — trace_plot","text":"Takes input stanfit object call sampling plots traces desired parameters.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/trace_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot MCMC sample traces — trace_plot","text":"","code":"trace_plot(object, pars, ...)  # S3 method for class 'stanfit' trace_plot(object, pars, labels, divergences = FALSE, warmup = FALSE, ...)"},{"path":"https://sefra-seabirds.github.io/sefra/reference/trace_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot MCMC sample traces — trace_plot","text":"object output call sampling. pars character vector posterior parameter samples extracted. ... (used) labels character expression vector labels divergences divergent samples marked? warmup warmup samples included?","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/trace_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot MCMC sample traces — trace_plot","text":"","code":"require(rstan)  mdl <- \"data{ int n; vector[n] x; }      parameters{ real mu; }      model{ x ~ normal(mu, 1.0);}     generated quantities{ vector[n] x_sim; real x_sim_sum;     for (i in 1:n) x_sim[i] = normal_rng(mu, 1.0); x_sim_sum = sum(x_sim);}\\n\"   mdl <- stan_model(model_code = mdl) n = 20 x = rnorm(n, 0, 2)  mdl.fit <- sampling(mdl, data = list(n = n, x = x),     init = function() list(mu = 0), chains = 1) #>  #> SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1.1e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.11 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.009 seconds (Warm-up) #> Chain 1:                0.009 seconds (Sampling) #> Chain 1:                0.018 seconds (Total) #> Chain 1:   trace_plot(mdl.fit, pars = \"mu\", labels = expression(mu))"},{"path":"https://sefra-seabirds.github.io/sefra/reference/versionUpdate.html","id":null,"dir":"Reference","previous_headings":"","what":"Version update — versionUpdate","title":"Version update — versionUpdate","text":"Update version number.","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/versionUpdate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Version update — versionUpdate","text":"","code":"versionUpdate(version, update = \"0.0.0\")"},{"path":"https://sefra-seabirds.github.io/sefra/reference/versionUpdate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Version update — versionUpdate","text":"version character string version number update update character string update increment","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/versionUpdate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Version update — versionUpdate","text":"","code":"versionUpdate(\"0.0.9\", update = \"0.0.1\") #> [1] \"0.1.0\""},{"path":"https://sefra-seabirds.github.io/sefra/reference/waic.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate ELPD and WAIC — waic","title":"Calculate ELPD and WAIC — waic","text":"Preferred model highest expected log-predictive density (ELPD) value lowest WAIC","code":""},{"path":"https://sefra-seabirds.github.io/sefra/reference/waic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate ELPD and WAIC — waic","text":"","code":"waic(object, ...)  # S3 method for class 'matrix' waic(object, ...)  # S3 method for class 'list' waic(object, ...)"},{"path":"https://sefra-seabirds.github.io/sefra/reference/waic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate ELPD and WAIC — waic","text":"object log-likelihood matrix list matrices ... optional log-likelihood matrices competing models","code":""}]
