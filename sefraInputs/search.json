[{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Create SEFRA inputs","text":"vignette provides example preparation observed captures effort incorporation 2025 CCSBT collaborative seabird risk assessment, applied simple synthetic dataset. overall approach identical used 2024 CCSBT seabird risk assessment, apart process loading biological data inputs. updated allow members prepare observed captures effort datasets using different sets biological inputs, e.g., different seabird density layers.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"set-up-an-r-session-for-data-preparation","dir":"Articles","previous_headings":"","what":"Set up an R session for data preparation","title":"Create SEFRA inputs","text":"Load packages required data preparation visualisation: Create local directory save groomed data necessary analysis. current demonstration, use temporary folder generated part active R session: dir_data directory groomed data outputs previous data preparation attempts, avoid issues version control. following remove ‘R’ data (.e. files .rda .RData extensions) TeX (.tex extensions) files dir_data folder sub-folders: , define characters used User defined names, e.g. species groups, fishery groups, time periods, etc.:","code":"library(sefraInputs) library(ggplot2) library(sf) library(kableExtra) library(dplyr) library(tidyr)  sf::sf_use_s2(FALSE) options(dplyr.summarise.inform = FALSE) dir_data <- file.path(tempdir(), \"data\") make_folder(dir_data, clean = TRUE) ## directory created latex_special_characters <- paste0(c(\"\\\\$\", \"\\\\&\", \"\\\\_\", \"\\\\{\"), collapse = \"|\") punctuation_characters <- \"[[:punct:]]\""},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"minimum-data-requirements","dir":"Articles","previous_headings":"","what":"Minimum data requirements","title":"Create SEFRA inputs","text":"Raw observed effort seabird captures data pelagic longliners stored accessed using custom scripts developed User. recommend observed effort observed seabird captures sourced separately, assume case. minimum requirements data described , required column headers: observed effort captures data must include variables : flag (ISO 3166-1 alpha-3 country code), year, month, latitude (lat) longitude (lon). Additional covariates required needed define fishery_group purposes estimating catchabilities. Typically, fishery_group defined flag, possible define fishery group using covariates, e.g. target species. Observed effort provided units thousand hooks (observer_effort). Observer effort can summed per flag, year, month, lat, lon fishery_group reduce file size. Observed captures provided variables species code (code), status -vessel (status = alive, dead NA unknown), number individuals captured (n_captures). Information age-class captures also provided available (age_class = adult, immature, juvenile, NA). Although information currently incorporated risk assessment model, inclusion data age-class captures allow preparation high-level summaries captures age-class. lat lon covariates must correspond centre 5x5 degree spatial grid finer, compatible seabird density maps. See ‘Spatial grid definition’ section information spatial structure observer data. observer data can provided User spatial resolution, long record can attributed single cell (see ?grid). population density maps 5x5 degree resolution, data summed across space create measure overlap, advantage preparing data finer resolution. temporal resolution observer data must (minimum) year month, compatible seabird density maps. ensure catchabilities correctly estimated, catch effort data must correctly matched. means capture data must strata represented observer effort data, matching columns contain equivalent information equivalent format. part data grooming process, observed captures linked corresponding observed effort, identical stratification data therefore necessary. captures outside spatial temporal range observer effort data, captures removed source error identified. forms part data preparation scripts .","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"check-observer-data-meet-minimum-requirements","dir":"Articles","previous_headings":"Minimum data requirements","what":"Check observer data meet minimum requirements","title":"Create SEFRA inputs","text":"Get totals initial observed effort captures. allow effects data filtering reported: Functions check_obs_effort check_obs_captures used ensure observer data meet minimum requirements: Additionally, User may also assign check_observed_effort check_observed_captures filter NAs appropriate variables: stratification obs_effort obs_captures identical, strata observed captures observed effort. Get variables define stratification observer data (strata_vars), ensure present observer effort capture data: Check record obs_captures matches one record obs_effort: return error record obs_captures matches multiple records obs_effort (due relationship argument). multiple records observer effort data particular strata, introduce duplication captures data joined: Filter captures strata corresponding observed effort data: Summarise remaining observed effort captures initial filtering:","code":"N_EFFORT   <- sum(obs_effort$observer_effort) N_CAPTURES <- sum(obs_captures$n_captures) check_observed_effort(obs_effort) check_observed_captures(obs_captures) obs_effort   <- check_observed_effort(obs_effort) obs_captures <- check_observed_captures(obs_captures) # Variables that define stratification of observed effort data strata_vars <- colnames(obs_effort)[!colnames(obs_effort) %in% \"observer_effort\"] stopifnot(all(strata_vars %in% colnames(obs_effort), strata_vars %in% colnames(obs_captures))) obs_effort %>% left_join(., obs_captures, by = strata_vars, relationship = \"one-to-many\") %>% invisible(.) # effort records per strata effort_records_per_strata <- obs_effort %>%   group_by_at(., strata_vars) %>%   summarise(., n = n())  stopifnot(max(effort_records_per_strata$n) == 1) obs_captures <- obs_captures %>% semi_join(., obs_effort, by = strata_vars) message(\"Retained effort accounts for \", round(100 * sum(obs_effort$observer_effort)/N_EFFORT, 1), \"% of total observed effort provided by User\") message(\"Retained captures account for \", round(100 * sum(obs_captures$n_captures)/N_CAPTURES, 1), \"% of total observed captures provided by User\")"},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"synthetic-datasets-used-in-this-vignette","dir":"Articles","previous_headings":"","what":"Synthetic datasets used in this vignette","title":"Create SEFRA inputs","text":"vignette, demonstrate data can prepared saved directory dir_data User’s machine, using synthetic data provided package build. synthetic data consists two files: Observed effort data obs_effort. Observed seabird captures obs_captures. loaded current R session, demonstration code: synthetic observed effort captures data following structure: Headers observed effort (synthetic data) Headers observed captures (synthetic data) synthetic data provided 5x5 degree spatial resolution, longitude latitude fields provide mid-point 5 degree square grid cell.","code":"data(obs_effort, obs_captures)"},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"check-that-synthetic-observer-data-meet-minimum-requirements","dir":"Articles","previous_headings":"Synthetic datasets used in this vignette","what":"Check that synthetic observer data meet minimum requirements","title":"Create SEFRA inputs","text":"Get totals initial observed effort captures: Get variables define stratification observer data (strata_vars), ensure present observer effort capture data: Check record obs_captures matches one record obs_effort: Check multiple records observer effort data particular strata, introduce duplication captures data joined: Filter captures strata corresponding observed effort data: Summarise remaining observed effort captures initial filtering:","code":"N_EFFORT   <- sum(obs_effort$observer_effort) N_CAPTURES <- sum(obs_captures$n_captures) obs_effort   <- check_observed_effort(obs_effort) obs_captures <- check_observed_captures(obs_captures) strata_vars <- colnames(obs_effort)[!colnames(obs_effort) %in% \"observer_effort\"] stopifnot(all(strata_vars %in% colnames(obs_effort), strata_vars %in% colnames(obs_captures))) obs_effort %>% left_join(., obs_captures, by = strata_vars, relationship = \"one-to-many\") %>% invisible(.) # effort records per strata effort_records_per_strata <- obs_effort %>%   group_by_at(., strata_vars) %>%   summarise(., n = n())  stopifnot(max(effort_records_per_strata$n) == 1) obs_captures <- obs_captures %>% semi_join(., obs_effort, by = strata_vars) message(\"Observed effort after check_observed_effort accounts for \", round(100 * sum(obs_effort$observer_effort)/N_EFFORT, 1), \"% of total observed effort provided by User\") ## Observed effort after check_observed_effort accounts for 100% of total observed effort provided by User message(\"Observed captures after check_observed_effort and check_observed_captures accounts for \", round(100 * sum(obs_captures$n_captures)/N_CAPTURES, 1), \"% of total observed captures provided by User\") ## Observed captures after check_observed_effort and check_observed_captures accounts for 100% of total observed captures provided by User"},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"access-biological-input-data-for-the-risk-assessment-model","dir":"Articles","previous_headings":"","what":"Access biological input data for the risk assessment model","title":"Create SEFRA inputs","text":"described , section updated 2025 CCSBT risk assessment, allow preparation data inputs different sets biological inputs. Biological input data risk assessment model, including demographic parameters seabird density maps, available sefraInputs package. biological inputs can accessed using sefra_data function. Calling sefra_data function arguments returns summary available biological inputs: data objects required, helpful, preparing data inputs can accessed call data(). check data available current package build, use:","code":"## Available SEFRA data: ##              name                        description             created ## 1       inputsBio                          reference 2025-02-10 15:14:40 ## 2       inputsBio                     2024_CCSBT_SRA 2025-02-10 15:14:40 ## 3 cryptic_capture                          reference 2025-02-10 15:14:40 ## 4    density_maps                     2024_CCSBT_SRA 2025-02-10 15:14:44 ## 5    density_maps 2024_CCSBT_SRA_combined_range_maps 2025-02-10 15:14:45 ## 6    density_maps                          reference 2025-02-10 15:14:47 ##                  version id ## 1 20250210T141440Z-4aa76  1 ## 2 20250210T141440Z-7ded8  2 ## 3 20250210T141440Z-166dd  1 ## 4 20250210T141444Z-6ebf4  1 ## 5 20250210T141445Z-9d68b  2 ## 6 20250210T141447Z-f16ec  3 data(package = \"sefraInputs\")"},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"demographic-parameters","dir":"Articles","previous_headings":"Access biological input data for the risk assessment model","what":"Demographic parameters","title":"Create SEFRA inputs","text":"load current biological inputs global environment (.e., inputsBio object) , select object description = \"reference\": biological inputs 2024 CCSBT risk assessment also available (.e., description = \"2024_CCSBT_SRA\"). Biological inputs updated added sefraInputs package project progresses. inputsBio list object, element providing inputs one biological demographic variable. set biological inputs contains following data frames: sp_codes, sp_groups, breeding_season, p_nest, breeding_phenology, p_southern, N_BP, P_B, S_curr, S_opt, A_curr, A_opt. approach intended facilitate data preparation different biological inputs, e.g., sensitivity analyses. , prepare synthetic observer dataset using current best estimates biological inputs: Create separate object element inputs_bio_option: retrieve species list:","code":"sefra_data(\"inputsBio\", description = \"reference\") ## Loaded data: ##  ##  ## |name      |description |created             |version                | id| ## |:---------|:-----------|:-------------------|:----------------------|--:| ## |inputsBio |reference   |2025-02-10 15:14:40 |20250210T141440Z-4aa76 |  1| inputs_bio_option <- inputsBio invisible(sapply(names(inputs_bio_option), function(i) {   assign(i, value = inputs_bio_option[[i]], envir = .GlobalEnv)   message(\"Created \", i) })) ## Created sp_codes ## Created sp_groups ## Created breeding_season ## Created p_nest ## Created breeding_phenology ## Created p_southern ## Created N_BP ## Created P_B ## Created S_curr ## Created S_opt ## Created A_curr ## Created A_opt assign(\"species\", value = inputs_bio_option[[\"sp_codes\"]][,\"code\"], envir = .GlobalEnv)"},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"seabird-density-maps","dir":"Articles","previous_headings":"Access biological input data for the risk assessment model","what":"Seabird density maps","title":"Create SEFRA inputs","text":"load current seabird density maps global environment (.e., density_maps object) , select object description = \"reference\": Density maps updated added sefraInputs package project progresses, e.g., updated density maps selected species additional tracking data, density maps incorporating range maps Birdlife International. , prepare synthetic observer dataset using current best estimates biological inputs: Create separate object element density_maps:","code":"sefra_data(\"density_maps\", description = \"reference\") ## Loaded data: ##  ##  ## |name         |description |created             |version                | id| ## |:------------|:-----------|:-------------------|:----------------------|--:| ## |density_maps |reference   |2025-02-10 15:14:47 |20250210T141447Z-f16ec |  3| density_maps_option <- density_maps invisible(sapply(names(density_maps_option), function(i) {   assign(paste0(\"densities_\", i), value = density_maps_option[[i]], envir = .GlobalEnv)   message(\"Created \", paste0(\"densities_\", i)) })) ## Created densities_dam ## Created densities_dbn ## Created densities_dcr ## Created densities_dcu ## Created densities_der ## Created densities_dic ## Created densities_dim ## Created densities_dip ## Created densities_diq ## Created densities_diw ## Created densities_dix ## Created densities_dks ## Created densities_dqs ## Created densities_dsb ## Created densities_pci ## Created densities_pcn ## Created densities_pcw ## Created densities_phe ## Created densities_phu ## Created densities_prk ## Created densities_pro ## Created densities_tqh ## Created densities_tqw ## Created densities_twd ## Created densities_dnb"},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"spatial-grid-definition","dir":"Articles","previous_headings":"Access biological input data for the risk assessment model","what":"Spatial grid definition","title":"Create SEFRA inputs","text":"seabird density maps 5 degree spatial structure. 5 degree grid (called grid) included sefraInputs package, facilitate preparation observed effort data spatial structure coordinate reference system consistent seabird density maps (see ?grid). consistency spatial structures coordinate reference systems required estimate spatial overlap fishing effort seabird populations. grid accessible using: grid sf object, 5 x 5 degree cell represented polygon. grid associated coordinate reference system (see st_crs(grid). data preparation, User’s observer data must converted sf object, coordinate reference system grid. done example dataset Section ‘Format obs_data calculation density overlap’.","code":"data(\"grid\", package = \"sefraInputs\")"},{"path":[]},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"species-in-the-risk-assessment-model","dir":"Articles","previous_headings":"Seabird species, and species groupings of catchabilities","what":"Species in the risk assessment model","title":"Create SEFRA inputs","text":"sp_codes data frame provides numeric species identifiers (id_species), species codes (code - using FAO ASFIS three-alpha codes available), common names (common_name), seabird species included risk assessment model:","code":"sp_codes %>% head(.) %>% kable(.)"},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"species-groupings-for-estimation-of-catchabilities","dir":"Articles","previous_headings":"Seabird species, and species groupings of catchabilities","what":"Species groupings for estimation of catchabilities","title":"Create SEFRA inputs","text":"Catchability parameters define catch rates per unit observed density overlap. Catchability parameters can shared across species, e.g. basis similarities behaviour attending fishing vessels. sp_groups data frame used define species groupings used estimate catchabilities, .e., species_group id_species_group variables. sp_groups object inputsBio[['reference']] provides species groupings used 2024 seabird risk assessment: However, species groupings can updated User application observer data (see following sub-section). sp_groups data frame also includes records seabird captures recorded species level. allows observed seabird captures inform risk assessment model, even captures identified species-level. variable taxonomic_resolution defines whether code reflects identifications species level, species complex (complex), genus family level. data field fao_code logical variable indicating whether code FAO ASFIS code (TRUE) (FALSE). id_code provides unique (integer) identifier record. Codes also provided captures identified finer taxonomic resolution genus, coarser resolution species. refer identified ‘species complex’ level. following records sp_groups give codes used captures identified ‘species complex’ level: following records sp_groups give codes used captures identified genus level: following records sp_groups give codes used captures identified family level: also record sp_groups code used captures identified family level: Users must map species codings seabird captures corresponding values sp_codes sp_groups, captures assigned correct species group estimation catchabilities. Additional records sp_groups may required facilitate mapping, example, captures codes reflect identifications finer taxonomic resolution genus, coarser resolution species. Users request additional records creating Issue sefraInputs Github repository. essential Users request additional records added sp_groups object R package necessary, rather working modified local version sp_groups. ensure members consistent codes (code) identifiers (id_code) captures datasets.","code":"sp_groups %>% filter(., !is.na(id_species_group)) %>%   select(., id_species_group, species_group) %>% distinct(.) %>%   arrange(., id_species_group) %>%   kable(.) sp_groups %>% filter(., taxonomic_resolution %in% \"complex\") %>% kable(.) sp_groups %>% filter(., taxonomic_resolution %in% \"genus\") %>% kable(.) sp_groups %>% filter(., taxonomic_resolution %in% \"family\") %>% kable(.) sp_groups %>% filter(., taxonomic_resolution %in% \"bird\") %>% kable(.)"},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"updating-species-groupings-for-estimation-of-catchabilities","dir":"Articles","previous_headings":"Seabird species, and species groupings of catchabilities","what":"Updating species groupings for estimation of catchabilities","title":"Create SEFRA inputs","text":"Species groups may need adjusted application User’s observer dataset. required, function assign_species_groups used update sp_groups object, based lookup table provided User called species_group_definitions. updated species groups sp_groups propagate observed captures observed overlap. User manually adjust species groups directly data objects, .e., directly adjust species_group id_species_group obs_data, obs_overlap, overlap_o, captures_o, etc. example, define species groups using genus, .e., grouping great albatrosses (Diomedea species) together, User run following: Species group names (species_group) can spaces, punctuation characters, special characters LaTeX, e.g. underscores (_), ampersands (&), dollar signs ($) etc. prepare synthetic data, use species groups 2024 CCSBT seabird risk assessment. Members also use species groups preparing data inclusion combined dataset (.e., dataset includes data participating members), consistent species groups must used members. First, ensure sp_groups updated: species groups : Species groups used prepare synthetic dataset. Save sp_groups (necessary) species_groups_definitions use risk assessment model:","code":"# Initial species groupings sp_groups_init <- sp_groups  # Updated species group definitions for separate groups per genus genus_list <- unique(sp_groups$genus) genus_list <- genus_list[!is.na(genus_list)] species_group_definitions <- data.frame(id_species_group = 1:length(genus_list), genus = genus_list, species_group = genus_list)  stopifnot(all(!grepl(latex_special_characters, species_group_definitions$species_group))) stopifnot(all(!grepl(punctuation_characters, species_group_definitions$species_group)))  # Assign updated species groups sp_groups <- assign_species_groups(sp_groups, species_group_definitions, by = \"genus\") if(!all.equal(sp_groups, inputs_bio_option[[\"sp_groups\"]])) {   message(\"Resetting species groups to inputs_bio_option[['sp_groups']]\")   sp_groups <- inputs_bio_option[[\"sp_groups\"]] } kable(sp_groups, caption = \"Species groups used to prepare the synthetic dataset.\") save(sp_groups, file = file.path(dir_data, \"sp_groups.rda\")) if(exists(\"species_group_definitions\")) {   save(species_group_definitions, file = file.path(dir_data, \"species_group_definitions.rda\")) }"},{"path":[]},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"specify-the-time-period-for-observations-used-to-estimate-catchabilities","dir":"Articles","previous_headings":"Prepare observed effort and captures data","what":"Specify the time-period for observations used to estimate catchabilities","title":"Create SEFRA inputs","text":"compromise specifying time-period observer data used estimate catchabilities. Seabird captures relatively rare, longer time-series observer data may preferred order inform model. However, earlier observer data may less reliable, e.g., observer training seabird identification monitoring seabird captures less robust earlier years. Furthermore, population sizes birds caught changed time. fishing_years_fit defines years observer data used estimate catchabilities. saved part data preparation process. example, use available observer data: observer data filtered keep data appropriate time period:","code":"fishing_years_fit <- 2020:2021 save(fishing_years_fit, file = file.path(dir_data, \"fishing_years_fit.rda\")) obs_effort   <- obs_effort %>% filter(., year %in% fishing_years_fit) obs_captures <- obs_captures %>% filter(., year %in% fishing_years_fit)"},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"combine-observed-effort-with-capture-data","dir":"Articles","previous_headings":"Prepare observed effort and captures data","what":"Combine observed effort with capture data","title":"Create SEFRA inputs","text":"Get total observed effort captures, used check total captures preserved: Add (numeric) code ID (id_code) capture data: Check observed captures species codes included risk assessment model: Restructure captures data one record per strata: Combine observed effort captures, check total observed effort captures preserved: Add unique identifier record obs_data called record_id: combined observer dataset following structure:","code":"N_EFFORT   <- sum(obs_effort$observer_effort) N_CAPTURES <- sum(obs_captures$n_captures) obs_captures <- sp_groups %>%   dplyr::select(., code, id_code) %>%   left_join(obs_captures, ., by = \"code\") CHK_CAPTURES <- obs_captures %>% anti_join(., sp_groups, by = \"code\")  message(\"Observed captures of species codes not included in the risk assessment model account for \", 100 - round(100 * sum(CHK_CAPTURES$n_captures)/N_CAPTURES, 1), \"% of total observed seabird captures\") ## Observed captures of species codes not included in the risk assessment model account for 100% of total observed seabird captures obs_captures <- obs_captures %>%   group_by_at(strata_vars) %>%   summarise(code = list(code),             id_code = list(id_code),             captures_status = list(status),             age_class = list(age_class),             n_captures = list(n_captures)) %>%   data.frame(.) obs_data <- obs_effort %>% left_join(., obs_captures, by = strata_vars) stopifnot(isTRUE(all.equal(sum(obs_data$observer_effort), N_EFFORT))) stopifnot(isTRUE(all.equal(sum(unlist(obs_data$n_captures)), N_CAPTURES))) obs_data <- obs_data %>% mutate(., record_id = row_number()) obs_data <- obs_data %>% select(., record_id, everything()) obs_data %>% kable(.)"},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"assign-fishery-group-ids","dir":"Articles","previous_headings":"Prepare observed effort and captures data","what":"Assign fishery group IDs","title":"Create SEFRA inputs","text":"necessary assign ‘fishery groups’ observed effort capture data. Catchabilities estimated fishery group specific parameter, different fishery groups , less, likely capture seabirds, else equal. However, observed effort represented single fishery group. function assign_fishery_groups assigns fishery groups, defined combination variables argument lk_definitions. variables defining fishery groups must present observer dataset dataset total effort used estimate total captures. example, define fishing groups based target species. First, create look-table called lk_fishery_groups provides name fishery group (fishery_group variable): id_fishery_group must integer. fishery_group names can spaces, punctuation characters, special characters LaTeX, e.g. underscores (_), ampersands (&), dollar signs ($) etc. create data frame called fishery_group_definitions defines fishery groups, case based target species: look-table fishery group names example (lk_fishery_groups) : data frame defining fishery groups (fishery_group_definitions) : Assign fishery groups obs_data using assign_fishery_groups: mentioned , User can choose include surface longline effort single fishery group. E.g., observed effort Japanese vessels, single fishery group applied : Check observer data assigned fishery group: save fishery_group_definitions lk_fishery_groups fishery groups can assigned total effort data (User’s longline fleet):","code":"lk_fishery_groups <- data.frame(id_fishery_group = c(1L, 2L), fishery_group = c(\"Albacore\", \"Tropical Tuna\"))  stopifnot(all(!duplicated(lk_fishery_groups$id_fishery_group))) stopifnot(is.integer(lk_fishery_groups$id_fishery_group)) stopifnot(all(!grepl(latex_special_characters, lk_fishery_groups$fishery_group))) stopifnot(all(!grepl(punctuation_characters, lk_fishery_groups$fishery_group))) fishery_group_definitions <- data.frame(id_fishery_group = c(1L, 2L), target = c(\"ALB\", \"BET+YFT\")) stopifnot(all(fishery_group_definitions$id_fishery_group %in% lk_fishery_groups$id_fishery_group)) obs_data <- assign_fishery_groups(obs_data, lk_definitions = fishery_group_definitions, lk_names = lk_fishery_groups) ## Joining with `by = join_by(target)` lk_fishery_groups <- data.frame(id_fishery_group = 1L, fishery_group = \"All\") fishery_group_definitions <- data.frame(id_fishery_group = 1L, flag = \"JPN\")  obs_data <- assign_fishery_groups(obs_data, lk_definitions = fishery_group_definitions, lk_names = lk_fishery_groups) CHK_EFFORT <- obs_data %>% filter(., !is.na(id_fishery_group)) %>% with(., sum(observer_effort)) CHK_CAPTURES <- obs_data %>% filter(., !is.na(id_fishery_group)) %>% with(., sum(unlist(n_captures)))  message(\"Observed effort with an assigned fishery group accounts for \", round(100 * CHK_EFFORT/N_EFFORT, 1), \"% of total observed effort\\n\",        \"(and \", round(100 * CHK_CAPTURES/N_CAPTURES, 1), \"% of total observed seabird captures)\") ## Observed effort with an assigned fishery group accounts for 100% of total observed effort ## (and 100% of total observed seabird captures) save(lk_fishery_groups, file = file.path(dir_data, \"lk_fishery_groups.rda\")) save(fishery_group_definitions, file = file.path(dir_data, \"fishery_group_definitions.rda\"))"},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"assign-time-periods-for-catchabilities","dir":"Articles","previous_headings":"Prepare observed effort and captures data","what":"Assign time periods for catchabilities","title":"Create SEFRA inputs","text":"Catchabilities can estimated time-varying catchabilities, e.g., reflect changes seabird bycatch mitigation measures time. Similarly fishery groups, full time series observer considered single time period. function assign_time_periods assigns periods time catchabilities shared. , example purposes, define separate time periods 2020 2021. Create look-table called lk_time_periods provides name time period (period variable): id_period must integer. period names can spaces, punctuation characters, special characters LaTeX, e.g. underscores (_), ampersands (&), dollar signs ($) etc. , create data frame called time_period_definitions defines separate time periods year: look-table time period names example (lk_time_periods) : data frame defining time periods (time_period_definitions) : Now assign time periods obs_data using assign_time_period: Check observer data assigned time period: save time_period_definitions lk_time_periods time periods can assigned total effort dataset (User’s longline fleet):","code":"lk_time_periods <- data.frame(id_period = c(1L, 2L), period = c(\"early\", \"late\"))  stopifnot(all(!duplicated(lk_time_periods$id_period))) stopifnot(is.integer(lk_time_periods$id_period)) stopifnot(all(!grepl(latex_special_characters, lk_time_periods$period))) stopifnot(all(!grepl(punctuation_characters, lk_time_periods$period))) time_period_definitions <- data.frame(id_period = c(1L, 2L), year = c(2020L, 2021L)) stopifnot(all(time_period_definitions$id_period %in% lk_time_periods$id_period)) obs_data <- assign_time_periods(obs_data, lk_definitions = time_period_definitions, lk_names = lk_time_periods) ## Joining with `by = join_by(year)` CHK_EFFORT <- obs_data %>% filter(., !is.na(id_period)) %>% with(., sum(observer_effort)) CHK_CAPTURES <- obs_data %>% filter(., !is.na(id_period)) %>% with(., sum(unlist(n_captures)))  message(\"Observed effort with an assigned time period accounts for \", round(100 * CHK_EFFORT/N_EFFORT, 1), \"% of total observed effort\\n\",        \"(and \", round(100 * CHK_CAPTURES/N_CAPTURES, 1), \"% of total observed seabird captures)\") ## Observed effort with an assigned time period accounts for 100% of total observed effort ## (and 100% of total observed seabird captures) save(lk_time_periods, file = file.path(dir_data, \"lk_time_periods.rda\")) save(time_period_definitions, file = file.path(dir_data, \"time_period_definitions.rda\"))"},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"remove-records-missing-required-information","dir":"Articles","previous_headings":"Prepare observed effort and captures data","what":"Remove records missing required information","title":"Create SEFRA inputs","text":"Remove records missing required information get observed density overlap seabird distributions:","code":"obs_data  <- obs_data %>%   filter(!is.na(month)) %>%   filter(!(is.na(lat) | is.na(lon))) CHK_EFFORT <- sum(obs_data$observer_effort) CHK_CAPTURES <- sum(unlist(obs_data$n_captures))  message(\"Observed effort with required location and month information accounts for \", round(100 * CHK_EFFORT/N_EFFORT, 1), \"% of total observed effort\\n\", \"(and \", round(100 * CHK_CAPTURES/N_CAPTURES, 1), \"% of total observed seabird captures)\") ## Observed effort with required location and month information accounts for 100% of total observed effort ## (and 100% of total observed seabird captures)"},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"format-obs_data-for-calculation-of-density-overlap","dir":"Articles","previous_headings":"Prepare observed effort and captures data","what":"Format obs_data for calculation of density overlap","title":"Create SEFRA inputs","text":"First, convert month give abbreviated month name, keeping month integer new field called month_id: month variable used get seabird density map correct month record obs_data. synthetic observer data provided 5 degree resolution (matching spatial resolution seabird density maps), provided latitude / longitude positions giving mid-point 5 degree cell. described , necessary obs_data sf object, correct coordinate reference system, allow calculation overlap fishing effort seabird distributions. spatial information included variable named geometry. Reformat obs_data sf object, geometry variable representing location fishing effort (provided lat/lons): coordinate reference system obs_data must transformed grid ensure consistent coordinate reference system seabird density maps: important note , preparing data, location fishing effort necessarily need represented point. example, polygons used aggregated effort data. appropriate approach User depend data structure, e.g., midpoints cells polygons appropriate data aggregated 1x1 5x5 resolution, whereas set locations can used set-level observer data. Add unique cell identifiers grid obs_data, allow model diagnostics spatial dimension: Points fall boundary multiple 5 degree cells (.e. boundary intersection polygons grid) assigned lowest id_cell matching cells fun = min get_id_cell calls. Note get_overlap uses mean density across appropriate cells, points boundary intersection multiple 5 degree cells. observer data following structure:","code":"obs_data$id_month <- obs_data$month obs_data$month <- month.abb[obs_data$month] stopifnot(all(!is.na(obs_data$month))) obs_data <- obs_data %>%   rowwise(.) %>%   mutate(., geometry = list(st_point(c(lon, lat)))) %>%   ungroup(.) %>%   st_as_sf(., crs = \"EPSG:4326\") obs_data <- obs_data %>% st_transform(crs = st_crs(grid)) obs_data <- get_id_cell(obs_data, fun = min) ## sf [8 × 18] (S3: sf/tbl_df/tbl/data.frame) ##  $ record_id       : int [1:8] 1 2 3 4 5 6 7 8 ##  $ flag            : chr [1:8] \"NZL\" \"NZL\" \"NZL\" \"NZL\" ... ##  $ target          : chr [1:8] \"BET+YFT\" \"ALB\" \"ALB\" \"BET+YFT\" ... ##  $ year            : int [1:8] 2020 2020 2020 2020 2021 2021 2021 2021 ##  $ month           : chr [1:8] \"Jan\" \"Apr\" \"Jul\" \"Oct\" ... ##  $ lon             : num [1:8] 72.5 77.5 82.5 87.5 72.5 77.5 82.5 87.5 ##  $ lat             : num [1:8] -32.5 -32.5 -32.5 -32.5 -27.5 -27.5 -27.5 -27.5 ##  $ observer_effort : int [1:8] 100 130 160 190 200 230 260 290 ##  $ code            :List of 8 ##   ..$ : NULL ##   ..$ : chr [1:8] \"DIW\" \"DIW\" \"DIW\" \"DIW\" ... ##   ..$ : chr [1:7] \"DCU\" \"DCU\" \"TWD\" \"TWD\" ... ##   ..$ : NULL ##   ..$ : chr [1:5] \"PCN\" \"PCN\" \"PCN\" \"PCN\" ... ##   ..$ : NULL ##   ..$ : NULL ##   ..$ : chr [1:7] \"PRO\" \"PRO\" \"PRO\" \"PRO\" ... ##  $ id_code         :List of 8 ##   ..$ : NULL ##   ..$ : int [1:8] 1 1 1 1 1 1 34 40 ##   ..$ : int [1:7] 12 12 13 13 13 35 35 ##   ..$ : NULL ##   ..$ : int [1:5] 25 25 25 25 37 ##   ..$ : NULL ##   ..$ : NULL ##   ..$ : int [1:7] 24 24 24 24 25 25 39 ##  $ captures_status :List of 8 ##   ..$ : NULL ##   ..$ : chr [1:8] \"alive\" \"alive\" \"dead\" NA ... ##   ..$ : chr [1:7] \"alive\" \"alive\" \"dead\" \"dead\" ... ##   ..$ : NULL ##   ..$ : chr [1:5] \"alive\" \"dead\" \"dead\" NA ... ##   ..$ : NULL ##   ..$ : NULL ##   ..$ : chr [1:7] \"alive\" \"alive\" \"dead\" \"dead\" ... ##  $ age_class       :List of 8 ##   ..$ : NULL ##   ..$ : chr [1:8] \"adult\" \"immature\" NA NA ... ##   ..$ : chr [1:7] \"adult\" \"immature\" \"adult\" \"immature\" ... ##   ..$ : NULL ##   ..$ : chr [1:5] NA \"immature\" \"juvenile\" NA ... ##   ..$ : NULL ##   ..$ : NULL ##   ..$ : chr [1:7] \"adult\" \"juvenile\" \"adult\" NA ... ##  $ n_captures      :List of 8 ##   ..$ : NULL ##   ..$ : int [1:8] 2 1 1 1 1 2 1 1 ##   ..$ : int [1:7] 5 1 2 1 1 1 2 ##   ..$ : NULL ##   ..$ : int [1:5] 1 11 1 1 2 ##   ..$ : NULL ##   ..$ : NULL ##   ..$ : int [1:7] 2 1 9 1 9 2 2 ##  $ id_fishery_group: int [1:8] 2 1 1 2 2 1 1 2 ##  $ id_period       : int [1:8] 1 1 1 1 2 2 2 2 ##  $ id_month        : int [1:8] 1 4 7 10 1 4 7 10 ##  $ geometry        :sfc_POINT of length 8; first list element:  'XY' num [1:2] -6087560 -801442 ##  $ id_cell         : int [1:8] 771 772 773 774 843 844 845 846 ##  - attr(*, \"sf_column\")= chr \"geometry\" ##  - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA NA NA NA ... ##   ..- attr(*, \"names\")= chr [1:17] \"record_id\" \"flag\" \"target\" \"year\" ..."},{"path":[]},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"calculate-density-overlap-of-observed-fishing-effort-with-seabird-distributions","dir":"Articles","previous_headings":"Generate data inputs for the risk assessment model","what":"Calculate density overlap of observed fishing effort with seabird distributions","title":"Create SEFRA inputs","text":"Calculate density overlap species: Finished spatial information obs_overlap, remove spatial information:","code":"obs_overlap <- obs_data %>% select(., record_id, flag, year, id_period, id_month, month, id_fishery_group, id_cell, observer_effort) for (spp in species) {   obs_overlap <- obs_overlap %>% get_overlap(., spp, effort_name = \"observer_effort\", group_name = \"month\") } obs_overlap <- obs_overlap %>% st_drop_geometry(.) stopifnot(nrow(obs_data) == nrow(obs_overlap))"},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"aggregate-observed-density-overlap","dir":"Articles","previous_headings":"Generate data inputs for the risk assessment model","what":"Aggregate observed density overlap","title":"Create SEFRA inputs","text":"Create object overlap_o aggregated observed overlap model fitting: structure overlap_o : overlap_o finer stratification resolution risk assessment model. allows detailed diagnostics model fits observed captures, temporally spatially.","code":"# Record for checking OVERLAP_O <- sum(obs_overlap[, grepl(\"^overlap_\", colnames(obs_overlap))], na.rm = TRUE)  # Generate data frame with aggregated observed overlap by species overlap_o <- obs_overlap %>% aggregate_overlap(., flag, id_fishery_group, year, id_period, id_month, month, id_cell)  # Add species groups and taxonomic information overlap_o <- sp_groups %>%   dplyr::select(., code, id_code, id_species_group, id_species, id_genus, id_family) %>%   left_join(overlap_o, ., by = \"code\")  # And reformat variables overlap_o <- overlap_o %>%   mutate(id_month = as.integer(id_month),          id_period = as.integer(id_period),          id_fishery_group = as.integer(id_fishery_group),          id_cell = as.integer(id_cell),          id_code = as.integer(id_code),          id_species_group = as.integer(id_species_group),          id_species = as.integer(id_species),          id_genus = as.integer(id_genus),          id_family = as.integer(id_family))  # Reorder variables overlap_o <- overlap_o %>%   dplyr::select(., flag, id_fishery_group, year, id_period, id_month, month, id_cell,                 code, id_code, id_species_group, id_species, id_genus, id_family, overlap)  # check no NA values stopifnot(all(!is.na(overlap_o$overlap)))  # check overlap stopifnot(isTRUE(all.equal(OVERLAP_O, sum(overlap_o$overlap)))) overlap_o %>% str(.) ## tibble [200 × 14] (S3: tbl_df/tbl/data.frame) ##  $ flag            : chr [1:200] \"NZL\" \"NZL\" \"NZL\" \"NZL\" ... ##  $ id_fishery_group: int [1:200] 1 1 1 1 2 2 2 2 1 1 ... ##  $ year            : int [1:200] 2020 2020 2021 2021 2020 2020 2021 2021 2020 2020 ... ##  $ id_period       : int [1:200] 1 1 2 2 1 1 2 2 1 1 ... ##  $ id_month        : int [1:200] 4 7 4 7 1 10 1 10 4 7 ... ##  $ month           : chr [1:200] \"Apr\" \"Jul\" \"Apr\" \"Jul\" ... ##  $ id_cell         : int [1:200] 772 773 844 845 771 774 843 846 772 773 ... ##  $ code            : chr [1:200] \"DAM\" \"DAM\" \"DAM\" \"DAM\" ... ##  $ id_code         : int [1:200] 5 5 5 5 5 5 5 5 4 4 ... ##  $ id_species_group: int [1:200] 1 1 1 1 1 1 1 1 1 1 ... ##  $ id_species      : int [1:200] 5 5 5 5 5 5 5 5 4 4 ... ##  $ id_genus        : int [1:200] 1 1 1 1 1 1 1 1 1 1 ... ##  $ id_family       : int [1:200] 1 1 1 1 1 1 1 1 1 1 ... ##  $ overlap         : num [1:200] 1.88e-05 1.70e-05 1.53e-05 1.41e-05 1.47e-05 ..."},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"aggregate-observed-captures-to-resolution-of-the-risk-assessment-model","dir":"Articles","previous_headings":"Generate data inputs for the risk assessment model","what":"Aggregate observed captures to resolution of the risk assessment model","title":"Create SEFRA inputs","text":"Get captures ‘species code’, including individuals identified species-level: Get captures status (alive / dead): Combine observed captures data include total individuals, individuals status: taxonomic ID fields captures_o, replace NAs -1’s: structure captures_o : Similarly overlap_o, captures_o finer stratification resolution risk assessment model. allows detailed diagnostics model fits observed captures, temporally spatially.","code":"# Create a named vector of all codes (used in aggregate_captures call) named_sp_codes <- sp_groups[, \"code\"] names(named_sp_codes) <- named_sp_codes  captures_all <- obs_data %>%   as.data.frame() %>%   aggregate_captures(strata = c(\"flag\", \"id_fishery_group\", \"year\", \"id_period\", \"id_month\", \"month\", \"id_cell\"), named_sp_codes) %>%   rename(., code = group)  # check no captures lost stopifnot(sum(captures_all$n_captures) == sum(unlist(obs_data$n_captures)[unlist(obs_data$code) %in% sp_groups$code])) captures_alive <- obs_data %>% as.data.frame(.) %>%   filter_captures(., field = \"captures_status\", condition = \"alive\") %>%   aggregate_captures(., strata = c(\"flag\", \"id_fishery_group\", \"year\", \"id_period\", \"id_month\", \"id_cell\"), named_sp_codes) %>%   rename(., code = group)  captures_dead <- obs_data %>% as.data.frame(.) %>%   filter_captures(., field = \"captures_status\", condition = \"dead\")  %>%   aggregate_captures(., strata = c(\"flag\", \"id_fishery_group\", \"year\", \"id_period\", \"id_month\", \"id_cell\"), named_sp_codes) %>%   rename(., code = group)  captures_status <- full_join(   captures_alive, captures_dead,   by = c(\"flag\", \"id_fishery_group\", \"year\", \"id_period\", \"id_month\", \"id_cell\", \"code\"),   suffix = c(\"_alive\", \"_dead\"))  # report captures without usable status information message(\"Captures without usable status information (i.e. not 'alive' or 'dead') = \",         sum(captures_all$n_captures) - sum(captures_status[, c(\"n_captures_alive\", \"n_captures_dead\")])) ## Captures without usable status information (i.e. not 'alive' or 'dead') = 3 captures_o <- sp_groups %>%   dplyr::select(., id_code, id_species_group, id_species, id_genus, id_family, code, taxonomic_resolution) %>%   left_join(., captures_all, by = \"code\", relationship = \"one-to-many\") %>%   left_join(., captures_status, by = c(\"flag\", \"id_fishery_group\", \"year\", \"id_period\", \"id_month\", \"id_cell\", \"code\"), relationship = \"one-to-one\")  captures_o <- captures_o %>% select(., flag, id_fishery_group, year, id_period, id_month, month, id_cell,                                     code, id_code, id_species_group, everything())  stopifnot(sum(captures_all$n_captures) == sum(captures_o$n_captures)) id_vars <- c(\"id_species\", \"id_species_group\", \"id_genus\", \"id_family\") captures_o[, id_vars] <- lapply(captures_o[, id_vars], function(x) {   x[is.na(x)] <- -1L   x }) captures_o %>% str(.) ## 'data.frame':    320 obs. of  17 variables: ##  $ flag                : chr  \"NZL\" \"NZL\" \"NZL\" \"NZL\" ... ##  $ id_fishery_group    : int  1 1 1 1 2 2 2 2 1 1 ... ##  $ year                : int  2020 2020 2021 2021 2020 2020 2021 2021 2020 2020 ... ##  $ id_period           : int  1 1 2 2 1 1 2 2 1 1 ... ##  $ id_month            : int  4 7 4 7 1 10 1 10 4 7 ... ##  $ month               : chr  \"Apr\" \"Jul\" \"Apr\" \"Jul\" ... ##  $ id_cell             : int  772 773 844 845 771 774 843 846 772 773 ... ##  $ code                : chr  \"DIW\" \"DIW\" \"DIW\" \"DIW\" ... ##  $ id_code             : int  1 1 1 1 1 1 1 1 2 2 ... ##  $ id_species_group    : num  1 1 1 1 1 1 1 1 1 1 ... ##  $ id_species          : int  1 1 1 1 1 1 1 1 2 2 ... ##  $ id_genus            : num  1 1 1 1 1 1 1 1 1 1 ... ##  $ id_family           : int  1 1 1 1 1 1 1 1 1 1 ... ##  $ taxonomic_resolution: chr  \"species\" \"species\" \"species\" \"species\" ... ##  $ n_captures          : int  8 0 0 0 0 0 0 0 0 0 ... ##  $ n_captures_alive    : int  6 0 0 0 0 0 0 0 0 0 ... ##  $ n_captures_dead     : int  1 0 0 0 0 0 0 0 0 0 ..."},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"generate-tables-and-figures-summarising-prepared-data","dir":"Articles","previous_headings":"","what":"Generate tables and figures summarising prepared data","title":"Create SEFRA inputs","text":", LaTeX tables figures generated summarise prepared observer dataset. facilitates generation standardised tables figures collaborating CCSBT members provide broad overview analysed datasets. Saving tables LaTeX format facilitate composition final report. Tables also saved binary format ease manipulation alternative presentations required. Make character string flags, use creating table captions etc.:","code":"tables_path <- file.path(dir_data, \"tables\") make_folder(tables_path) ## directory created figures_path <- file.path(dir_data, \"figures\") make_folder(figures_path) ## directory created flag_str <- paste(unique(overlap_o$flag), collapse = \", \") flag_str_label <- paste(unique(overlap_o$flag), collapse = \"-\")"},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"summary-tables-of-observed-effort","dir":"Articles","previous_headings":"Generate tables and figures summarising prepared data","what":"Summary tables of observed effort","title":"Create SEFRA inputs","text":"","code":"# Observed effort by year tab <- obs_data %>%   st_drop_geometry(.) %>%    group_by(., flag, year) %>%   summarise(., observer_effort = sum(observer_effort)) %>% ungroup(.)  # Drop flag from object used to create kable object observed_effort <- tab tab <- tab %>% select(., - flag)  # Format numeric variables tab <- tab %>% numeric_table_format(., names = \"observer_effort\", digits = 1)  # Set column names for kable object kbl_colnames <- stringr::str_to_sentence(colnames(tab)) kbl_colnames <- gsub(\"_\", \" \", kbl_colnames)  # caption kbl_cap <- paste0(\"Sum of observed fishing effort ('000 hooks) per year for \", flag_str, \".\")  tab <- kable(tab, format = 'latex',        col.names = kbl_colnames,        row.names = FALSE,        caption = kbl_cap,        label = paste0(\"observed_effort_by_year_\", flag_str_label),        align = c(\"l\", \"r\"),        linesep = \"\", booktabs = TRUE, escape = FALSE) %>% kable_styling(font_size = 10, latex_options = \"hold_position\") %>%   sub(\"\\\\\\\\toprule\", \"\", .) %>%   sub(\"\\\\\\\\bottomrule\", \"\", .)  save_kable(tab, file = file.path(tables_path, \"observed_effort_by_year.tex\")) save(observed_effort, file = file.path(tables_path, \"observed_effort_by_year.rda\")) # Observed effort by year and fishery group if(nrow(lk_fishery_groups) > 1) {   tab <- obs_data %>%     st_drop_geometry(.) %>%     group_by(., flag, year, id_fishery_group) %>%     summarise(., observer_effort = sum(observer_effort)) %>% ungroup(.)   tab <- tab %>% left_join(., lk_fishery_groups, by = \"id_fishery_group\")   tab <- tab %>% pivot_wider(., id_cols = c(flag, year), names_from = fishery_group, values_from = observer_effort, values_fill = 0)    # Add a totals column   tab$total <- rowSums(tab[, !colnames(tab) %in% c(\"flag\", \"year\")])    # Drop flag from object used to create kable object   observed_effort_by_fgroup <- tab     tab <- tab %>% select(., - flag)    # Format numeric variables   tab <- tab %>% numeric_table_format(., names = c(lk_fishery_groups$fishery_group, \"total\"), digits = 1)    # Set column names for kable object   kbl_colnames <- stringr::str_to_sentence(colnames(tab))    # caption   kbl_cap <- paste0(\"Sum of observed effort ('000 hooks) by fishery group for \", flag_str, \".\")    tab <- kable(tab, format = 'latex',        col.names = kbl_colnames,        row.names = FALSE,        caption = kbl_cap,        label = paste0(\"observed_effort_by_fgroup\", flag_str_label),        align = c(\"l\", rep(\"r\", times = ncol(tab) - 1)),        linesep = \"\", booktabs = TRUE, escape = FALSE) %>% kable_styling(font_size = 10, latex_options = \"hold_position\") %>%   sub(\"\\\\\\\\toprule\", \"\", .) %>%   sub(\"\\\\\\\\bottomrule\", \"\", .)      save_kable(tab, file = file.path(tables_path, \"observed_effort_by_fgroup.tex\"))   save(observed_effort_by_fgroup, file = file.path(tables_path, \"observed_effort_by_fgroup.rda\")) }"},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"summary-tables-of-observed-captures-by-code","dir":"Articles","previous_headings":"Generate tables and figures summarising prepared data","what":"Summary tables of observed captures by code","title":"Create SEFRA inputs","text":"","code":"# Captures by species code (and capture status) tab <- captures_o %>% group_by(., flag, code) %>% summarise(., across(matches(\"captures\"), sum)) %>% ungroup(.) tab <- sp_groups %>% select(., code, common_name, taxonomic_resolution) %>%   left_join(., tab, by = \"code\") %>%   select(., flag, code, common_name, taxonomic_resolution, n_captures, n_captures_alive, n_captures_dead)  # Drop flag from object used to create kable object observed_captures_by_code <- tab tab <- tab %>% select(., - flag)  # Format numeric variables tab <- tab %>% numeric_table_format(., names = c(\"n_captures\", \"n_captures_alive\", \"n_captures_dead\"), digits = 0) ## New names: ## New names: ## • `` -> `...1` ## • `` -> `...2` ## • `` -> `...3` # Set column names for kable object kbl_colnames <- colnames(tab) kbl_colnames <- gsub(\"n_captures$\", \"Total\", kbl_colnames) kbl_colnames <- gsub(\"n_captures_\", \"\", kbl_colnames) kbl_colnames <- stringr::str_to_sentence(kbl_colnames) kbl_colnames <- gsub(\"_\", \" \", kbl_colnames)  kbl_cap <- paste0(\"Sum of observed captures by code for \", flag_str, \".\")  tab <- kable(tab, format = 'latex',        col.names = kbl_colnames,        row.names = FALSE,        caption = kbl_cap,        label = paste0(\"observed_captures_by_code\", flag_str_label),        align = c(\"l\", \"l\", \"l\", \"r\", \"r\", \"r\"),        linesep = \"\", booktabs = TRUE, escape = FALSE) %>% kable_styling(font_size = 10, latex_options = \"hold_position\") %>%   sub(\"\\\\\\\\toprule\", \"\", .) %>%   sub(\"\\\\\\\\bottomrule\", \"\", .) save_kable(tab, file = file.path(tables_path, \"observed_captures_by_code.tex\")) save(observed_captures_by_code, file = file.path(tables_path, \"observed_captures_by_code.rda\")) # Observed captures by species and fishery group if(nrow(lk_fishery_groups) > 1) {   tab <- captures_o %>% group_by(., flag, id_fishery_group, code) %>%     summarise(., n_captures = sum(n_captures)) %>% ungroup(.)   tab <- sp_groups %>% select(., code, common_name, taxonomic_resolution) %>%     left_join(., tab, by = \"code\") %>%     left_join(., lk_fishery_groups, by = \"id_fishery_group\") %>%     select(., flag, code, common_name, fishery_group, n_captures)      tab <- tab %>% pivot_wider(., id_cols = c(flag, code, common_name), names_from = fishery_group, values_from = n_captures, values_fill = 0)      # Add a totals column   tab$total <- rowSums(tab[, !colnames(tab) %in% c(\"flag\", \"code\", \"common_name\")])      # Drop flag from object used to create kable object   observed_captures_by_code_fgroup <- tab   tab <- tab %>% select(., - flag)    # Format numeric variables   tab <- tab %>% numeric_table_format(., names = c(lk_fishery_groups$fishery_group, \"total\"), digits = 0)      # Set column names for kable object   kbl_colnames <- stringr::str_to_sentence(colnames(tab))   kbl_colnames <- gsub(\"_\", \" \", kbl_colnames)      kbl_cap <- paste0(\"Sum of observed captures by code and fishery group for \", flag_str, \".\")      tab <- kable(tab, format = 'latex',        col.names = kbl_colnames,        row.names = FALSE,        caption = kbl_cap,        label = paste0(\"observed_captures_by_code_fgroup\", flag_str_label),        align = c(\"l\", \"l\", rep(\"r\", times = ncol(tab)-2)),        linesep = \"\", booktabs = TRUE, escape = FALSE) %>% kable_styling(font_size = 10, latex_options = \"hold_position\") %>%   sub(\"\\\\\\\\toprule\", \"\", .) %>%   sub(\"\\\\\\\\bottomrule\", \"\", .)      save_kable(tab, file = file.path(tables_path, \"observed_captures_by_code_fgroup.tex\"))   save(observed_captures_by_code_fgroup, file = file.path(tables_path, \"observed_captures_by_code_fgroup.rda\")) } # Observed captures by species and time period if(nrow(lk_time_periods) > 1) {   tab <- captures_o %>% group_by(., flag, id_period, code) %>%     summarise(., n_captures = sum(n_captures)) %>% ungroup(.)   tab <- sp_groups %>% select(., code, common_name, taxonomic_resolution) %>%     left_join(., tab, by = \"code\") %>%     left_join(., lk_time_periods, by = \"id_period\") %>%     select(., flag, code, common_name, period, n_captures)      tab <- tab %>% pivot_wider(., id_cols = c(flag, code, common_name), names_from = period, values_from = n_captures, values_fill = 0)      # Add a totals column   tab$total <- rowSums(tab[, !colnames(tab) %in% c(\"flag\", \"code\", \"common_name\")])    # Drop flag from object used to create kable object   observed_captures_by_code_period <- tab   tab <- tab %>% select(., - flag)    # Format numeric variables   tab <- tab %>% numeric_table_format(., names = c(lk_time_periods$period, \"total\"), digits = 0)      # Set column names for kable object   kbl_colnames <- stringr::str_to_sentence(colnames(tab))   kbl_colnames <- gsub(\"_\", \" \", kbl_colnames)      kbl_cap <- paste0(\"Sum of observed captures by code and period for \", flag_str, \".\")      tab <- kable(tab, format = 'latex',        col.names = kbl_colnames,        row.names = FALSE,        caption = kbl_cap,        label = paste0(\"observed_captures_by_code_period\", flag_str_label),        align = c(\"l\", \"l\", rep(\"r\", times = ncol(tab)-2)),        linesep = \"\", booktabs = TRUE, escape = FALSE) %>% kable_styling(font_size = 10, latex_options = \"hold_position\") %>%   sub(\"\\\\\\\\toprule\", \"\", .) %>%   sub(\"\\\\\\\\bottomrule\", \"\", .)      save_kable(tab, file = file.path(tables_path, \"observed_captures_by_code_period.tex\"))   save(observed_captures_by_code_period, file = file.path(tables_path, \"observed_captures_by_code_period.rda\")) }"},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"summary-tables-of-observed-captures-by-species-group","dir":"Articles","previous_headings":"Generate tables and figures summarising prepared data","what":"Summary tables of observed captures by species group","title":"Create SEFRA inputs","text":"","code":"# Captures by species group (and capture status) tab <- captures_o %>% group_by(., flag, id_species_group) %>% summarise(., across(matches(\"captures\"), sum)) %>% ungroup(.) tab <- sp_groups %>% select(., id_species_group, species_group) %>%   filter(., !is.na(id_species_group)) %>%   distinct(.) %>%   left_join(., tab, by = \"id_species_group\") %>%   select(., flag, species_group, n_captures, n_captures_alive, n_captures_dead)  # Drop flag from object used to create kable object observed_captures_by_species_group <- tab tab <- tab %>% select(., - flag)    # Format numeric variables tab <- tab %>% numeric_table_format(., names = c(\"n_captures\", \"n_captures_alive\", \"n_captures_dead\"), digits = 0) ## New names: ## New names: ## • `` -> `...1` ## • `` -> `...2` ## • `` -> `...3` # Set column names for kable object kbl_colnames <- colnames(tab) kbl_colnames <- gsub(\"n_captures$\", \"Total\", kbl_colnames) kbl_colnames <- gsub(\"n_captures_\", \"\", kbl_colnames) kbl_colnames <- stringr::str_to_sentence(kbl_colnames) kbl_colnames <- gsub(\"_\", \" \", kbl_colnames)  kbl_cap <- paste0(\"Sum of observed captures by species group for \", flag_str, \", including only captures identified to a species level.\")  tab <- kable(tab, format = 'latex',        col.names = kbl_colnames,        row.names = FALSE,        caption = kbl_cap,        label = paste0(\"observed_captures_by_species_group\", flag_str_label),        align = c(\"l\", \"l\", \"r\", \"r\", \"r\"),        linesep = \"\", booktabs = TRUE, escape = FALSE) %>% kable_styling(font_size = 10, latex_options = \"hold_position\") %>%   sub(\"\\\\\\\\toprule\", \"\", .) %>%   sub(\"\\\\\\\\bottomrule\", \"\", .)  save_kable(tab, file = file.path(tables_path, \"observed_captures_by_species_group.tex\")) save(observed_captures_by_species_group, file = file.path(tables_path, \"observed_captures_by_species_group.rda\")) # Observed captures by species group and fishery group if(nrow(lk_fishery_groups) > 1) {   tab <- captures_o %>% group_by(., flag, id_fishery_group, id_species_group) %>%     summarise(., n_captures = sum(n_captures)) %>% ungroup(.)   tab <- sp_groups %>% select(., id_species_group, species_group) %>%     filter(., !is.na(id_species_group)) %>%     distinct(.) %>%     left_join(., tab, by = \"id_species_group\") %>%     left_join(., lk_fishery_groups, by = \"id_fishery_group\") %>%     select(., flag, species_group, fishery_group, n_captures)      tab <- tab %>% pivot_wider(., id_cols = c(flag, species_group), names_from = fishery_group, values_from = n_captures, values_fill = 0)      # Add a totals column   tab$total <- rowSums(tab[, !colnames(tab) %in% c(\"flag\", \"species_group\")])      # Drop flag from object used to create kable object   observed_captures_by_group_fgroup <- tab   tab <- tab %>% select(., - flag)    # Format numeric variables   tab <- tab %>% numeric_table_format(., names = c(lk_fishery_groups$fishery_group, \"total\"), digits = 0)      # Set column names for kable object   kbl_colnames <- stringr::str_to_sentence(colnames(tab))   kbl_colnames <- gsub(\"_\", \" \", kbl_colnames)    kbl_cap <- paste0(\"Sum of observed captures by species group and fishery group for \", flag_str, \", including only captures identified to a species level.\")      tab <- kable(tab, format = 'latex',        col.names = kbl_colnames,        row.names = FALSE,        caption = kbl_cap,        label = paste0(\"observed_captures_by_group_fgroup\", flag_str_label),        align = c(\"l\", rep(\"r\", times = ncol(tab)-1)),        linesep = \"\", booktabs = TRUE, escape = FALSE) %>% kable_styling(font_size = 10, latex_options = \"hold_position\") %>%   sub(\"\\\\\\\\toprule\", \"\", .) %>%   sub(\"\\\\\\\\bottomrule\", \"\", .)    save_kable(tab, file = file.path(tables_path, \"observed_captures_by_group_fgroup.tex\"))   save(observed_captures_by_group_fgroup, file = file.path(tables_path, \"observed_captures_by_group_fgroup.rda\")) } # Observed captures by species group and fishery group if(nrow(lk_time_periods) > 1) {   tab <- captures_o %>% group_by(., flag, id_period, id_species_group) %>%     summarise(., n_captures = sum(n_captures)) %>% ungroup(.)   tab <- sp_groups %>% select(., id_species_group, species_group) %>%     filter(., !is.na(id_species_group)) %>%     distinct(.) %>%     left_join(., tab, by = \"id_species_group\") %>%     left_join(., lk_time_periods, by = \"id_period\") %>%     select(., flag, species_group, period, n_captures)      tab <- tab %>% pivot_wider(., id_cols = c(flag, species_group), names_from = period, values_from = n_captures, values_fill = 0)      # Add a totals column   tab$total <- rowSums(tab[, !colnames(tab) %in% c(\"flag\", \"species_group\")])      # Drop flag from object used to create kable object   observed_captures_by_group_period <- tab   tab <- tab %>% select(., - flag)    # Format numeric variables   tab <- tab %>% numeric_table_format(., names = c(lk_time_periods$period, \"total\"), digits = 0)      # Set column names for kable object   kbl_colnames <- stringr::str_to_sentence(colnames(tab))   kbl_colnames <- gsub(\"_\", \" \", kbl_colnames)      kbl_cap <- paste0(\"Sum of observed captures by species group and period for \", flag_str, \", including only captures identified to a species level.\")      tab <- kable(tab, format = 'latex',        col.names = kbl_colnames,        row.names = FALSE,        caption = kbl_cap,        label = paste0(\"observed_captures_by_group_period\", flag_str_label),        align = c(\"l\", rep(\"r\", times = ncol(tab)-1)),        linesep = \"\", booktabs = TRUE, escape = FALSE) %>% kable_styling(font_size = 10, latex_options = \"hold_position\") %>%   sub(\"\\\\\\\\toprule\", \"\", .) %>%   sub(\"\\\\\\\\bottomrule\", \"\", .)    save_kable(tab, file = file.path(tables_path, \"observed_captures_by_group_period.tex\"))   save(observed_captures_by_group_period, file = file.path(tables_path, \"observed_captures_by_group_period.rda\")) }"},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"summary-of-observed-captures-by-age-class","dir":"Articles","previous_headings":"Generate tables and figures summarising prepared data","what":"Summary of observed captures by age class","title":"Create SEFRA inputs","text":"","code":"## get total captures by code tab_all <- obs_data %>% as.data.frame(.) %>%   aggregate_captures(\"flag\", named_sp_codes) %>%   rename(., code = group)  ## get captures by code for each age class tab_adults <- obs_data %>% as.data.frame(.) %>%   filter_captures(., field = \"age_class\", condition = \"adult\") %>%   aggregate_captures(., \"flag\", named_sp_codes) %>%   rename(., code = group, n_captures_adult = n_captures)  tab_immatures <- obs_data %>% as.data.frame(.) %>%   filter_captures(., field = \"age_class\", condition = \"immature\") %>%   aggregate_captures(., \"flag\", named_sp_codes) %>%   rename(., code = group, n_captures_immature = n_captures)  tab_juveniles <- obs_data %>% as.data.frame(.) %>%   filter_captures(., field = \"age_class\", condition = \"juvenile\") %>%   aggregate_captures(., \"flag\", named_sp_codes) %>%   rename(., code = group, n_captures_juvenile = n_captures)  ## combine in to a single table tab_all <- tab_all %>% left_join(., tab_adults, by = c(\"flag\", \"code\")) tab_all <- tab_all %>% left_join(., tab_immatures, by = c(\"flag\", \"code\")) tab_all <- tab_all %>% left_join(., tab_juveniles, by = c(\"flag\", \"code\"))  ## add species name tab <- sp_groups %>%   select(., code, common_name) %>%   left_join(., tab_all, by = \"code\") %>%   select(., flag, code, common_name, contains(\"n_captures\"))  # Drop flag from object used to create kable object observed_captures_by_code_age_class <- tab tab <- tab %>% select(., - flag)  # Format numeric variables tab <- tab %>% numeric_table_format(., names = c(\"n_captures\", \"n_captures_adult\", \"n_captures_immature\", \"n_captures_juvenile\"), digits = 0) ## New names: ## New names: ## • `` -> `...1` ## • `` -> `...2` ## • `` -> `...3` ## • `` -> `...4` # Set column names for kable object kbl_colnames <- colnames(tab) kbl_colnames <- gsub(\"n_captures$\", \"Total\", kbl_colnames) kbl_colnames <- gsub(\"n_captures_\", \"\", kbl_colnames) kbl_colnames <- stringr::str_to_sentence(kbl_colnames) kbl_colnames <- gsub(\"_\", \" \", kbl_colnames)  kbl_cap <- paste0(\"Sum of observed captures by code and age class for \", flag_str, \".\")  tab <- kable(tab, format = 'latex',        col.names = kbl_colnames,        row.names = FALSE,        caption = kbl_cap,        label = paste0(\"observed_captures_by_code_age_class\", flag_str_label),        align = c(\"l\", \"l\", rep(\"r\", times = ncol(tab)-2)),        linesep = \"\", booktabs = TRUE, escape = FALSE) %>% kable_styling(font_size = 10, latex_options = \"hold_position\") %>%   sub(\"\\\\\\\\toprule\", \"\", .) %>%   sub(\"\\\\\\\\bottomrule\", \"\", .)  save_kable(tab, file = file.path(tables_path, \"observed_captures_by_code_age_class.tex\")) save(observed_captures_by_code_age_class, file = file.path(tables_path, \"observed_captures_by_code_age_class.rda\"))"},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"summary-tables-of-observed-overlap","dir":"Articles","previous_headings":"Generate tables and figures summarising prepared data","what":"Summary tables of observed overlap","title":"Create SEFRA inputs","text":"","code":"# Observed overlap by species tab <- overlap_o %>% group_by(., flag, id_species) %>%   summarise(., across(matches(\"overlap\"), sum)) %>% ungroup(.) tab <- tab %>% left_join(., sp_codes, by = \"id_species\") %>%   select(., flag, code, common_name, overlap)  # Drop flag from object used to create kable object observed_overlap <- tab tab <- tab %>% select(., - flag)  # Format numeric variables tab <- tab %>% numeric_table_format(., names = \"overlap\", digits = 4)  # Set column names for kable object kbl_colnames <- stringr::str_to_sentence(colnames(tab)) kbl_colnames <- gsub(\"_\", \" \", kbl_colnames) kbl_colnames <- gsub(\"Overlap\", \"Observed overlap\", kbl_colnames)  kbl_cap <- paste0(\"Sum of observed overlap by species for \", flag_str, \".\")  tab <- kable(tab, format = 'latex',        col.names = kbl_colnames,        row.names = FALSE,        caption = kbl_cap,        label = paste0(\"observed_overlap\", flag_str_label),        align = c(\"l\", \"l\", \"r\"),        linesep = \"\", booktabs = TRUE, escape = FALSE) %>% kable_styling(font_size = 10, latex_options = \"hold_position\") %>%   sub(\"\\\\\\\\toprule\", \"\", .) %>%   sub(\"\\\\\\\\bottomrule\", \"\", .)  save_kable(tab, file = file.path(tables_path, \"observed_overlap.tex\")) save(observed_overlap, file = file.path(tables_path, \"observed_overlap.rda\")) # Observed overlap by species and fishery group if(nrow(lk_fishery_groups) > 1) {   tab <- overlap_o %>% group_by(., flag, id_fishery_group, id_species) %>%     summarise(., across(matches(\"overlap\"), sum)) %>% ungroup(.)   tab <- tab %>%     left_join(., sp_codes, by = \"id_species\") %>%     left_join(., lk_fishery_groups, by = \"id_fishery_group\") %>%     select(., flag, code, common_name, fishery_group, overlap)      tab <- tab %>% pivot_wider(., id_cols = c(flag, code, common_name), names_from = fishery_group, values_from = overlap, values_fill = 0)      # Add a totals column   tab$total <- rowSums(tab[, !colnames(tab) %in% c(\"flag\", \"code\", \"common_name\")])    # Drop flag from object used to create kable object   observed_overlap_by_fgroup <- tab   tab <- tab %>% select(., - flag)    # Format numeric variables   tab <- tab %>% numeric_table_format(., names = c(lk_fishery_groups$fishery_group, \"total\"), digits = 4)      # Set column names for kable object   kbl_colnames <- stringr::str_to_sentence(colnames(tab))   kbl_colnames <- gsub(\"_\", \" \", kbl_colnames)    kbl_cap <- paste0(\"Observed overlap by species and fishery group for \", flag_str, \".\")      tab <- kable(tab, format = 'latex',        col.names = kbl_colnames,        row.names = FALSE,        caption = kbl_cap,        label = paste0(\"observed_overlap_by_fgroup\", flag_str_label),        align = c(\"l\", \"l\", rep(\"r\", times = ncol(tab)-2)),        linesep = \"\", booktabs = TRUE, escape = FALSE) %>% kable_styling(font_size = 10, latex_options = \"hold_position\") %>%   sub(\"\\\\\\\\toprule\", \"\", .) %>%   sub(\"\\\\\\\\bottomrule\", \"\", .)    save_kable(tab, file = file.path(tables_path, \"observed_overlap_by_fgroup.tex\"))   save(observed_overlap_by_fgroup, file = file.path(tables_path, \"observed_overlap_by_fgroup.rda\")) } # Observed overlap by species and period if(nrow(lk_time_periods) > 1) {   tab <- overlap_o %>% group_by(., flag, id_period, id_species) %>%     summarise(., across(matches(\"overlap\"), sum)) %>% ungroup(.)   tab <- tab %>%     left_join(., sp_codes, by = \"id_species\") %>%     left_join(., lk_time_periods, by = \"id_period\") %>%     select(., flag, code, common_name, period, overlap)      tab <- tab %>% pivot_wider(., id_cols = c(flag, code, common_name), names_from = period, values_from = overlap, values_fill = 0)      # Add a totals column   tab$total <- rowSums(tab[, !colnames(tab) %in% c(\"flag\", \"code\", \"common_name\")])    # Drop flag from object used to create kable object   observed_overlap_by_period <- tab   tab <- tab %>% select(., - flag)    # Format numeric variables   tab <- tab %>% numeric_table_format(., names = c(lk_time_periods$period, \"total\"), digits = 4)      # Set column names for kable object   kbl_colnames <- stringr::str_to_sentence(colnames(tab))   kbl_colnames <- gsub(\"_\", \" \", kbl_colnames)    kbl_cap <- paste0(\"Sum of observed overlap by period for \", flag_str, \".\")      tab <- kable(tab, format = 'latex',        col.names = kbl_colnames,        row.names = FALSE,        caption = kbl_cap,        label = paste0(\"observed_overlap_by_period\", flag_str_label),        align = c(\"l\", \"l\", rep(\"r\", times = ncol(tab)-2)),        linesep = \"\", booktabs = TRUE, escape = FALSE) %>% kable_styling(font_size = 10, latex_options = \"hold_position\") %>%   sub(\"\\\\\\\\toprule\", \"\", .) %>%   sub(\"\\\\\\\\bottomrule\", \"\", .)    save_kable(tab, file = file.path(tables_path, \"observed_overlap_by_period.tex\"))   save(observed_overlap_by_period, file = file.path(tables_path, \"observed_overlap_by_period.rda\")) }"},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"summary-figures-of-observed-effort","dir":"Articles","previous_headings":"Generate tables and figures summarising prepared data","what":"Summary figures of observed effort","title":"Create SEFRA inputs","text":"Figure - map overall observed effort Figure - map overall observed effort month Figure - map overall observed effort fishery group Figure - map overall observed effort time period","code":"# Map of overall observed effort  # get observed effort by cell plt_dat <- obs_data %>%   st_drop_geometry(.) %>%   group_by(., id_cell) %>%   summarise(., observer_effort = sum(observer_effort)) %>%   ungroup(.)  # add geometry from grid plt_dat <- plt_dat %>% left_join(., grid, by = \"id_cell\") %>% st_as_sf(.)  # generate plot plt <- ggplot(plt_dat) +   geom_sf(aes(fill = observer_effort), col = NA) +   guides(fill = \"none\") +   scale_fill_viridis_c(\"Observed\\neffort\", direction = -1, limits = c(0, NA)) +   theme_sh()  ggsave(paste0(\"map_observed_effort_\", flag_str_label, \".png\"), plot = plt, device = \"png\",        path = figures_path, width = 5, height = 5, units = \"in\") # Map of observed effort by month  # get observed effort by cell plt_dat <- obs_data %>%   st_drop_geometry(.) %>%   group_by(., id_cell, id_month) %>%   summarise(., observer_effort = sum(observer_effort)) %>%   ungroup(.)  # add geometry from grid plt_dat <- plt_dat %>% left_join(., grid, by = \"id_cell\") %>% st_as_sf(.)  # generate plot plt <- ggplot(plt_dat) +   geom_sf(aes(fill = observer_effort), col = NA) +   guides(fill = \"none\") +   scale_fill_viridis_c(\"Observed\\neffort\", direction = -1, limits = c(0, NA)) +   facet_wrap(vars(id_month), nrow = 4, ncol = 3) +   theme_sh()  ggsave(paste0(\"map_observed_effort_by_month_\", flag_str_label, \".png\"), plot = plt, device = \"png\",        path = figures_path, width = 5, height = 5, units = \"in\") # Map of observed effort by fishery group if(nrow(lk_fishery_groups) > 1) {    # get observed effort by cell   plt_dat <- obs_data %>%     st_drop_geometry(.) %>%     group_by(., id_cell, id_fishery_group) %>%     summarise(., observer_effort = sum(observer_effort)) %>%     ungroup(.)    plt_dat <- plt_dat %>% left_join(., lk_fishery_groups, by = \"id_fishery_group\")    # add geometry from grid   plt_dat <- plt_dat %>% left_join(., grid, by = \"id_cell\") %>% st_as_sf(.)    # generate plot   plt <- ggplot(plt_dat) +     geom_sf(aes(fill = observer_effort), col = NA) +     guides(fill = \"none\") +     scale_fill_viridis_c(\"Observed\\neffort\", direction = -1) +     facet_wrap(vars(fishery_group), nrow = nrow(lk_fishery_groups), ncol = 1) +     theme_sh()    ggsave(paste0(\"map_observed_effort_by_fgroup_\", flag_str_label, \".png\"), plot = plt, device = \"png\",          path = figures_path, width = 5, height = 5.5 * nrow(lk_fishery_groups), units = \"in\") } # Map of observed effort by time period if(nrow(lk_time_periods) > 1) {    # get observed effort by cell   plt_dat <- obs_data %>%     st_drop_geometry(.) %>%     group_by(., id_cell, id_period) %>%     summarise(., observer_effort = sum(observer_effort)) %>%     ungroup(.)    plt_dat <- plt_dat %>% left_join(., lk_time_periods, by = \"id_period\")    # add geometry from grid   plt_dat <- plt_dat %>% left_join(., grid, by = \"id_cell\") %>% st_as_sf(.)    # generate plot   plt <- ggplot(plt_dat) +     geom_sf(aes(fill = observer_effort), col = NA) +     guides(fill = \"none\") +     scale_fill_viridis_c(\"Observed\\neffort\", direction = -1) +     facet_wrap(vars(period), nrow = nrow(lk_time_periods), ncol = 1) +     theme_sh()    ggsave(paste0(\"map_observed_effort_by_period_\", flag_str_label, \".png\"), plot = plt, device = \"png\",          path = figures_path, width = 5, height = 5.5 * nrow(lk_time_periods), units = \"in\") }"},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"save-prepared-data","dir":"Articles","previous_headings":"","what":"Save prepared data","title":"Create SEFRA inputs","text":"Save processed observer data raw (.e., un-aggregated) resolution: obs_data obs_overlap required input risk assessment model, may interest User.","code":"save(obs_data, file = file.path(dir_data, \"obs_data.rda\")) save(obs_overlap, file = file.path(dir_data, \"obs_overlap.rda\"))"},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"save-inputs-to-the-risk-assessment-model","dir":"Articles","previous_headings":"","what":"Save inputs to the risk assessment model","title":"Create SEFRA inputs","text":"Save observed overlap: Save captures data:","code":"save(overlap_o, file = file.path(dir_data, \"overlap_o.rda\")) save(captures_o, file = file.path(dir_data, \"captures_o.rda\"))"},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/make_inputs.html","id":"issues-preparing-your-data","dir":"Articles","previous_headings":"","what":"Issues preparing your data","title":"Create SEFRA inputs","text":"encounter issues preparing observer dataset, please create new Issue sefraInputs Github repository description problem, including error messages, one project team assist.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/test_sefra_data.html","id":"set-up-an-r-session-for-data-preparation","dir":"Articles","previous_headings":"","what":"Set up an R session for data preparation","title":"Check SEFRA data inputs","text":"Load packages required data preparation visualisation:","code":"library(sefraInputs)"},{"path":"https://sefra-seabirds.github.io/sefraInputs/articles/test_sefra_data.html","id":"test-that-sefra_data-r-works","dir":"Articles","previous_headings":"","what":"Test that sefra_data.R works","title":"Check SEFRA data inputs","text":"Return list available data Load density maps global environment: Load biological inputs global environment assign: Note loading another set biological inputs overwrite inputsBio object global environment (similarly data objects): Examine structure data objects:","code":"sefra_data() ## Available SEFRA data: ##              name                        description             created ## 1       inputsBio                          reference 2025-02-10 15:14:40 ## 2       inputsBio                     2024_CCSBT_SRA 2025-02-10 15:14:40 ## 3 cryptic_capture                          reference 2025-02-10 15:14:40 ## 4    density_maps                     2024_CCSBT_SRA 2025-02-10 15:14:44 ## 5    density_maps 2024_CCSBT_SRA_combined_range_maps 2025-02-10 15:14:45 ## 6    density_maps                          reference 2025-02-10 15:14:47 ##                  version id ## 1 20250210T141440Z-4aa76  1 ## 2 20250210T141440Z-7ded8  2 ## 3 20250210T141440Z-166dd  1 ## 4 20250210T141444Z-6ebf4  1 ## 5 20250210T141445Z-9d68b  2 ## 6 20250210T141447Z-f16ec  3 sefra_data(\"density_maps\", description = \"reference\") ## Loaded data: ##  ##  ## |name         |description |created             |version                | id| ## |:------------|:-----------|:-------------------|:----------------------|--:| ## |density_maps |reference   |2025-02-10 15:14:47 |20250210T141447Z-f16ec |  3| stopifnot(\"dam\" %in% names(density_maps), length(density_maps) == 25) inputs_bio_ref <- sefra_data(\"inputsBio\", description = \"reference\") ## Loaded data: ##  ##  ## |name      |description |created             |version                | id| ## |:---------|:-----------|:-------------------|:----------------------|--:| ## |inputsBio |reference   |2025-02-10 15:14:40 |20250210T141440Z-4aa76 |  1| stopifnot(\"N_BP\" %in% names(inputs_bio_ref)) attr(inputsBio, \"description\") ## [1] \"current inputs for 2025 CCSBT risk assessment\" attr(inputs_bio_ref, \"description\") ## [1] \"current inputs for 2025 CCSBT risk assessment\" inputs_bio_prev <- sefra_data(\"inputsBio\", description = \"2024_CCSBT_SRA\") ## Loaded data: ##  ##  ## |name      |description    |created             |version                | id| ## |:---------|:--------------|:-------------------|:----------------------|--:| ## |inputsBio |2024_CCSBT_SRA |2025-02-10 15:14:40 |20250210T141440Z-7ded8 |  2| attr(inputsBio, \"description\") ## [1] \"inputs for 2024 CCSBT risk assessment\" attr(inputs_bio_prev, \"description\") ## [1] \"inputs for 2024 CCSBT risk assessment\" ## the original inputsBio object in global environment was overwritten ## when reloading inputsBio and assigning to inputs_bio_prev str(density_maps) ## List of 25 ##  $ dam: sf [15,552 × 3] (S3: sf/tbl_df/tbl/data.frame) ##   ..$ geometry:sfc_POLYGON of length 15552; first list element: List of 1 ##   .. ..$ : num [1:5, 1:2] 1564564 2331950 2228485 1495146 1564564 ... ##   .. ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\" ##   ..$ month   : Factor w/ 12 levels \"Jan\",\"Feb\",\"Mar\",..: 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ value   : num [1:15552] 0 0 0 0 0 0 0 0 0 0 ... ##   ..- attr(*, \"sf_column\")= chr \"geometry\" ##   ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA ##   .. ..- attr(*, \"names\")= chr [1:2] \"month\" \"value\" ##   ..- attr(*, \"version\")=Classes 'package_version', 'numeric_version'  hidden list of 1 ##   .. ..$ : int [1:3] 2 1 2 ##  $ dbn: sf [15,552 × 3] (S3: sf/tbl_df/tbl/data.frame) ##   ..$ geometry:sfc_POLYGON of length 15552; first list element: List of 1 ##   .. ..$ : num [1:5, 1:2] 1564564 2331950 2228485 1495146 1564564 ... ##   .. ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\" ##   ..$ month   : Factor w/ 12 levels \"Jan\",\"Feb\",\"Mar\",..: 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ value   : num [1:15552] 0 0 0 0 0 0 0 0 0 0 ... ##   ..- attr(*, \"sf_column\")= chr \"geometry\" ##   ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA ##   .. ..- attr(*, \"names\")= chr [1:2] \"month\" \"value\" ##   ..- attr(*, \"version\")=Classes 'package_version', 'numeric_version'  hidden list of 1 ##   .. ..$ : int [1:3] 2 1 2 ##  $ dcr: sf [15,552 × 3] (S3: sf/tbl_df/tbl/data.frame) ##   ..$ geometry:sfc_POLYGON of length 15552; first list element: List of 1 ##   .. ..$ : num [1:5, 1:2] 1564564 2331950 2228485 1495146 1564564 ... ##   .. ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\" ##   ..$ month   : Factor w/ 12 levels \"Jan\",\"Feb\",\"Mar\",..: 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ value   : num [1:15552] 0 0 0 0 0 0 0 0 0 0 ... ##   ..- attr(*, \"sf_column\")= chr \"geometry\" ##   ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA ##   .. ..- attr(*, \"names\")= chr [1:2] \"month\" \"value\" ##   ..- attr(*, \"version\")=Classes 'package_version', 'numeric_version'  hidden list of 1 ##   .. ..$ : int [1:3] 2 1 2 ##  $ dcu: sf [15,552 × 3] (S3: sf/tbl_df/tbl/data.frame) ##   ..$ geometry:sfc_POLYGON of length 15552; first list element: List of 1 ##   .. ..$ : num [1:5, 1:2] 1564564 2331950 2228485 1495146 1564564 ... ##   .. ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\" ##   ..$ month   : Factor w/ 12 levels \"Jan\",\"Feb\",\"Mar\",..: 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ value   : num [1:15552] 0 0 0 0 0 0 0 0 0 0 ... ##   ..- attr(*, \"sf_column\")= chr \"geometry\" ##   ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA ##   .. ..- attr(*, \"names\")= chr [1:2] \"month\" \"value\" ##   ..- attr(*, \"version\")=Classes 'package_version', 'numeric_version'  hidden list of 1 ##   .. ..$ : int [1:3] 2 1 2 ##  $ der: sf [15,552 × 3] (S3: sf/tbl_df/tbl/data.frame) ##   ..$ geometry:sfc_POLYGON of length 15552; first list element: List of 1 ##   .. ..$ : num [1:5, 1:2] 1564564 2331950 2228485 1495146 1564564 ... ##   .. ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\" ##   ..$ month   : Factor w/ 12 levels \"Jan\",\"Feb\",\"Mar\",..: 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ value   : num [1:15552] 0 0 0 0 0 0 0 0 0 0 ... ##   ..- attr(*, \"sf_column\")= chr \"geometry\" ##   ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA ##   .. ..- attr(*, \"names\")= chr [1:2] \"month\" \"value\" ##   ..- attr(*, \"version\")=Classes 'package_version', 'numeric_version'  hidden list of 1 ##   .. ..$ : int [1:3] 2 1 2 ##  $ dic: sf [15,552 × 3] (S3: sf/tbl_df/tbl/data.frame) ##   ..$ geometry:sfc_POLYGON of length 15552; first list element: List of 1 ##   .. ..$ : num [1:5, 1:2] 1564564 2331950 2228485 1495146 1564564 ... ##   .. ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\" ##   ..$ month   : Factor w/ 12 levels \"Jan\",\"Feb\",\"Mar\",..: 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ value   : num [1:15552] 0 0 0 0 0 0 0 0 0 0 ... ##   ..- attr(*, \"sf_column\")= chr \"geometry\" ##   ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA ##   .. ..- attr(*, \"names\")= chr [1:2] \"month\" \"value\" ##   ..- attr(*, \"version\")=Classes 'package_version', 'numeric_version'  hidden list of 1 ##   .. ..$ : int [1:3] 2 1 2 ##  $ dim: sf [15,552 × 3] (S3: sf/tbl_df/tbl/data.frame) ##   ..$ geometry:sfc_POLYGON of length 15552; first list element: List of 1 ##   .. ..$ : num [1:5, 1:2] 1564564 2331950 2228485 1495146 1564564 ... ##   .. ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\" ##   ..$ month   : Factor w/ 12 levels \"Jan\",\"Feb\",\"Mar\",..: 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ value   : num [1:15552] 0 0 0 0 0 0 0 0 0 0 ... ##   ..- attr(*, \"sf_column\")= chr \"geometry\" ##   ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA ##   .. ..- attr(*, \"names\")= chr [1:2] \"month\" \"value\" ##   ..- attr(*, \"version\")=Classes 'package_version', 'numeric_version'  hidden list of 1 ##   .. ..$ : int [1:3] 2 1 2 ##  $ dip: sf [15,552 × 3] (S3: sf/tbl_df/tbl/data.frame) ##   ..$ geometry:sfc_POLYGON of length 15552; first list element: List of 1 ##   .. ..$ : num [1:5, 1:2] 1564564 2331950 2228485 1495146 1564564 ... ##   .. ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\" ##   ..$ month   : Factor w/ 12 levels \"Jan\",\"Feb\",\"Mar\",..: 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ value   : num [1:15552] 0 0 0 0 0 0 0 0 0 0 ... ##   ..- attr(*, \"sf_column\")= chr \"geometry\" ##   ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA ##   .. ..- attr(*, \"names\")= chr [1:2] \"month\" \"value\" ##   ..- attr(*, \"version\")=Classes 'package_version', 'numeric_version'  hidden list of 1 ##   .. ..$ : int [1:3] 2 1 2 ##  $ diq: sf [15,552 × 3] (S3: sf/tbl_df/tbl/data.frame) ##   ..$ geometry:sfc_POLYGON of length 15552; first list element: List of 1 ##   .. ..$ : num [1:5, 1:2] 1564564 2331950 2228485 1495146 1564564 ... ##   .. ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\" ##   ..$ month   : Factor w/ 12 levels \"Jan\",\"Feb\",\"Mar\",..: 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ value   : num [1:15552] 0 0 0 0 0 0 0 0 0 0 ... ##   ..- attr(*, \"sf_column\")= chr \"geometry\" ##   ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA ##   .. ..- attr(*, \"names\")= chr [1:2] \"month\" \"value\" ##   ..- attr(*, \"version\")=Classes 'package_version', 'numeric_version'  hidden list of 1 ##   .. ..$ : int [1:3] 2 1 2 ##  $ diw: sf [15,552 × 3] (S3: sf/tbl_df/tbl/data.frame) ##   ..$ geometry:sfc_POLYGON of length 15552; first list element: List of 1 ##   .. ..$ : num [1:5, 1:2] 1564564 2331950 2228485 1495146 1564564 ... ##   .. ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\" ##   ..$ month   : Factor w/ 12 levels \"Jan\",\"Feb\",\"Mar\",..: 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ value   : num [1:15552] 0 0 0 0 0 0 0 0 0 0 ... ##   ..- attr(*, \"sf_column\")= chr \"geometry\" ##   ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA ##   .. ..- attr(*, \"names\")= chr [1:2] \"month\" \"value\" ##   ..- attr(*, \"version\")=Classes 'package_version', 'numeric_version'  hidden list of 1 ##   .. ..$ : int [1:3] 2 1 2 ##  $ dix: sf [15,552 × 3] (S3: sf/tbl_df/tbl/data.frame) ##   ..$ geometry:sfc_POLYGON of length 15552; first list element: List of 1 ##   .. ..$ : num [1:5, 1:2] 1564564 2331950 2228485 1495146 1564564 ... ##   .. ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\" ##   ..$ month   : Factor w/ 12 levels \"Jan\",\"Feb\",\"Mar\",..: 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ value   : num [1:15552] 0 0 0 0 0 0 0 0 0 0 ... ##   ..- attr(*, \"sf_column\")= chr \"geometry\" ##   ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA ##   .. ..- attr(*, \"names\")= chr [1:2] \"month\" \"value\" ##   ..- attr(*, \"version\")=Classes 'package_version', 'numeric_version'  hidden list of 1 ##   .. ..$ : int [1:3] 2 1 2 ##  $ dks: sf [15,552 × 3] (S3: sf/tbl_df/tbl/data.frame) ##   ..$ geometry:sfc_POLYGON of length 15552; first list element: List of 1 ##   .. ..$ : num [1:5, 1:2] 1564564 2331950 2228485 1495146 1564564 ... ##   .. ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\" ##   ..$ month   : Factor w/ 12 levels \"Jan\",\"Feb\",\"Mar\",..: 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ value   : num [1:15552] 0 0 0 0 0 0 0 0 0 0 ... ##   ..- attr(*, \"sf_column\")= chr \"geometry\" ##   ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA ##   .. ..- attr(*, \"names\")= chr [1:2] \"month\" \"value\" ##   ..- attr(*, \"version\")=Classes 'package_version', 'numeric_version'  hidden list of 1 ##   .. ..$ : int [1:3] 2 1 2 ##  $ dqs: sf [15,552 × 3] (S3: sf/tbl_df/tbl/data.frame) ##   ..$ geometry:sfc_POLYGON of length 15552; first list element: List of 1 ##   .. ..$ : num [1:5, 1:2] 1564564 2331950 2228485 1495146 1564564 ... ##   .. ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\" ##   ..$ month   : Factor w/ 12 levels \"Jan\",\"Feb\",\"Mar\",..: 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ value   : num [1:15552] 0 0 0 0 0 0 0 0 0 0 ... ##   ..- attr(*, \"sf_column\")= chr \"geometry\" ##   ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA ##   .. ..- attr(*, \"names\")= chr [1:2] \"month\" \"value\" ##   ..- attr(*, \"version\")=Classes 'package_version', 'numeric_version'  hidden list of 1 ##   .. ..$ : int [1:3] 2 1 2 ##  $ dsb: sf [15,552 × 3] (S3: sf/tbl_df/tbl/data.frame) ##   ..$ geometry:sfc_POLYGON of length 15552; first list element: List of 1 ##   .. ..$ : num [1:5, 1:2] 1564564 2331950 2228485 1495146 1564564 ... ##   .. ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\" ##   ..$ month   : Factor w/ 12 levels \"Jan\",\"Feb\",\"Mar\",..: 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ value   : num [1:15552] 0 0 0 0 0 0 0 0 0 0 ... ##   ..- attr(*, \"sf_column\")= chr \"geometry\" ##   ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA ##   .. ..- attr(*, \"names\")= chr [1:2] \"month\" \"value\" ##   ..- attr(*, \"version\")=Classes 'package_version', 'numeric_version'  hidden list of 1 ##   .. ..$ : int [1:3] 2 1 2 ##  $ pci: sf [15,552 × 3] (S3: sf/tbl_df/tbl/data.frame) ##   ..$ geometry:sfc_POLYGON of length 15552; first list element: List of 1 ##   .. ..$ : num [1:5, 1:2] 1564564 2331950 2228485 1495146 1564564 ... ##   .. ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\" ##   ..$ month   : Factor w/ 12 levels \"Jan\",\"Feb\",\"Mar\",..: 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ value   : num [1:15552] 0 0 0 0 0 0 0 0 0 0 ... ##   ..- attr(*, \"sf_column\")= chr \"geometry\" ##   ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA ##   .. ..- attr(*, \"names\")= chr [1:2] \"month\" \"value\" ##   ..- attr(*, \"version\")=Classes 'package_version', 'numeric_version'  hidden list of 1 ##   .. ..$ : int [1:3] 2 1 2 ##  $ pcn: sf [15,552 × 3] (S3: sf/tbl_df/tbl/data.frame) ##   ..$ geometry:sfc_POLYGON of length 15552; first list element: List of 1 ##   .. ..$ : num [1:5, 1:2] 1564564 2331950 2228485 1495146 1564564 ... ##   .. ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\" ##   ..$ month   : Factor w/ 12 levels \"Jan\",\"Feb\",\"Mar\",..: 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ value   : num [1:15552] 0 0 0 0 0 0 0 0 0 0 ... ##   ..- attr(*, \"sf_column\")= chr \"geometry\" ##   ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA ##   .. ..- attr(*, \"names\")= chr [1:2] \"month\" \"value\" ##   ..- attr(*, \"version\")=Classes 'package_version', 'numeric_version'  hidden list of 1 ##   .. ..$ : int [1:3] 2 1 2 ##  $ pcw: sf [15,552 × 3] (S3: sf/tbl_df/tbl/data.frame) ##   ..$ geometry:sfc_POLYGON of length 15552; first list element: List of 1 ##   .. ..$ : num [1:5, 1:2] 1564564 2331950 2228485 1495146 1564564 ... ##   .. ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\" ##   ..$ month   : Factor w/ 12 levels \"Jan\",\"Feb\",\"Mar\",..: 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ value   : num [1:15552] 0 0 0 0 0 0 0 0 0 0 ... ##   ..- attr(*, \"sf_column\")= chr \"geometry\" ##   ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA ##   .. ..- attr(*, \"names\")= chr [1:2] \"month\" \"value\" ##   ..- attr(*, \"version\")=Classes 'package_version', 'numeric_version'  hidden list of 1 ##   .. ..$ : int [1:3] 2 1 2 ##  $ phe: sf [15,552 × 3] (S3: sf/tbl_df/tbl/data.frame) ##   ..$ geometry:sfc_POLYGON of length 15552; first list element: List of 1 ##   .. ..$ : num [1:5, 1:2] 1564564 2331950 2228485 1495146 1564564 ... ##   .. ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\" ##   ..$ month   : Factor w/ 12 levels \"Jan\",\"Feb\",\"Mar\",..: 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ value   : num [1:15552] 0 0 0 0 0 0 0 0 0 0 ... ##   ..- attr(*, \"sf_column\")= chr \"geometry\" ##   ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA ##   .. ..- attr(*, \"names\")= chr [1:2] \"month\" \"value\" ##   ..- attr(*, \"version\")=Classes 'package_version', 'numeric_version'  hidden list of 1 ##   .. ..$ : int [1:3] 2 1 2 ##  $ phu: sf [15,552 × 3] (S3: sf/tbl_df/tbl/data.frame) ##   ..$ geometry:sfc_POLYGON of length 15552; first list element: List of 1 ##   .. ..$ : num [1:5, 1:2] 1564564 2331950 2228485 1495146 1564564 ... ##   .. ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\" ##   ..$ month   : Factor w/ 12 levels \"Jan\",\"Feb\",\"Mar\",..: 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ value   : num [1:15552] 0 0 0 0 0 0 0 0 0 0 ... ##   ..- attr(*, \"sf_column\")= chr \"geometry\" ##   ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA ##   .. ..- attr(*, \"names\")= chr [1:2] \"month\" \"value\" ##   ..- attr(*, \"version\")=Classes 'package_version', 'numeric_version'  hidden list of 1 ##   .. ..$ : int [1:3] 2 1 2 ##  $ prk: sf [19,008 × 3] (S3: sf/tbl_df/tbl/data.frame) ##   ..$ geometry:sfc_POLYGON of length 19008; first list element: List of 1 ##   .. ..$ : num [1:5, 1:2] 1811566 2700102 2615259 1754642 1811566 ... ##   .. ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\" ##   ..$ month   : Factor w/ 12 levels \"Jan\",\"Feb\",\"Mar\",..: 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ value   : num [1:19008] 0 0 0 0 0 0 0 0 0 0 ... ##   ..- attr(*, \"sf_column\")= chr \"geometry\" ##   ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA ##   .. ..- attr(*, \"names\")= chr [1:2] \"month\" \"value\" ##   ..- attr(*, \"version\")=Classes 'package_version', 'numeric_version'  hidden list of 1 ##   .. ..$ : int [1:3] 2 1 2 ##  $ pro: sf [15,552 × 3] (S3: sf/tbl_df/tbl/data.frame) ##   ..$ geometry:sfc_POLYGON of length 15552; first list element: List of 1 ##   .. ..$ : num [1:5, 1:2] 1564564 2331950 2228485 1495146 1564564 ... ##   .. ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\" ##   ..$ month   : Factor w/ 12 levels \"Jan\",\"Feb\",\"Mar\",..: 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ value   : num [1:15552] 0 0 0 0 0 0 0 0 0 0 ... ##   ..- attr(*, \"sf_column\")= chr \"geometry\" ##   ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA ##   .. ..- attr(*, \"names\")= chr [1:2] \"month\" \"value\" ##   ..- attr(*, \"version\")=Classes 'package_version', 'numeric_version'  hidden list of 1 ##   .. ..$ : int [1:3] 2 1 2 ##  $ tqh: sf [15,552 × 3] (S3: sf/tbl_df/tbl/data.frame) ##   ..$ geometry:sfc_POLYGON of length 15552; first list element: List of 1 ##   .. ..$ : num [1:5, 1:2] 1564564 2331950 2228485 1495146 1564564 ... ##   .. ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\" ##   ..$ month   : Factor w/ 12 levels \"Jan\",\"Feb\",\"Mar\",..: 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ value   : num [1:15552] 0 0 0 0 0 0 0 0 0 0 ... ##   ..- attr(*, \"sf_column\")= chr \"geometry\" ##   ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA ##   .. ..- attr(*, \"names\")= chr [1:2] \"month\" \"value\" ##   ..- attr(*, \"version\")=Classes 'package_version', 'numeric_version'  hidden list of 1 ##   .. ..$ : int [1:3] 2 1 2 ##  $ tqw: sf [15,552 × 3] (S3: sf/tbl_df/tbl/data.frame) ##   ..$ geometry:sfc_POLYGON of length 15552; first list element: List of 1 ##   .. ..$ : num [1:5, 1:2] 1564564 2331950 2228485 1495146 1564564 ... ##   .. ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\" ##   ..$ month   : Factor w/ 12 levels \"Jan\",\"Feb\",\"Mar\",..: 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ value   : num [1:15552] 0 0 0 0 0 0 0 0 0 0 ... ##   ..- attr(*, \"sf_column\")= chr \"geometry\" ##   ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA ##   .. ..- attr(*, \"names\")= chr [1:2] \"month\" \"value\" ##   ..- attr(*, \"version\")=Classes 'package_version', 'numeric_version'  hidden list of 1 ##   .. ..$ : int [1:3] 2 1 2 ##  $ twd: sf [15,552 × 3] (S3: sf/tbl_df/tbl/data.frame) ##   ..$ geometry:sfc_POLYGON of length 15552; first list element: List of 1 ##   .. ..$ : num [1:5, 1:2] 1564564 2331950 2228485 1495146 1564564 ... ##   .. ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\" ##   ..$ month   : Factor w/ 12 levels \"Jan\",\"Feb\",\"Mar\",..: 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ value   : num [1:15552] 0 0 0 0 0 0 0 0 0 0 ... ##   ..- attr(*, \"sf_column\")= chr \"geometry\" ##   ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA ##   .. ..- attr(*, \"names\")= chr [1:2] \"month\" \"value\" ##   ..- attr(*, \"version\")=Classes 'package_version', 'numeric_version'  hidden list of 1 ##   .. ..$ : int [1:3] 2 1 2 ##  $ dnb: sf [15,552 × 3] (S3: sf/tbl_df/tbl/data.frame) ##   ..$ geometry:sfc_POLYGON of length 15552; first list element: List of 1 ##   .. ..$ : num [1:5, 1:2] 1564564 2331950 2228485 1495146 1564564 ... ##   .. ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\" ##   ..$ month   : Factor w/ 12 levels \"Jan\",\"Feb\",\"Mar\",..: 10 11 12 1 2 3 4 5 6 7 ... ##   ..$ value   : num [1:15552] 0 0 0 0 0 0 0 0 0 0 ... ##   ..- attr(*, \"sf_column\")= chr \"geometry\" ##   ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA ##   .. ..- attr(*, \"names\")= chr [1:2] \"month\" \"value\" ##   ..- attr(*, \"version\")=Classes 'package_version', 'numeric_version'  hidden list of 1 ##   .. ..$ : int [1:3] 2 1 2 ##  - attr(*, \"date\")= chr \"10-Feb-2025\" ##  - attr(*, \"description\")= chr \"current density maps for 2025 CCSBT risk assessment\" str(inputs_bio_ref) ## List of 12 ##  $ sp_codes          :'data.frame':  25 obs. of  3 variables: ##   ..$ id_species : int [1:25] 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ code       : chr [1:25] \"DIW\" \"DQS\" \"DIX\" \"DBN\" ... ##   ..$ common_name: chr [1:25] \"Gibson's albatross\" \"Antipodean albatross\" \"Wandering albatross\" \"Tristan albatross\" ... ##  $ sp_groups         :'data.frame':  40 obs. of  15 variables: ##   ..$ common_name         : chr [1:40] \"Gibson's albatross\" \"Antipodean albatross\" \"Wandering albatross\" \"Tristan albatross\" ... ##   ..$ scientific_name     : chr [1:40] \"Diomedea antipodensis gibsoni\" \"Diomedea antipodensis antipodensis\" \"Diomedea exulans\" \"Diomedea dabbenena\" ... ##   ..$ genus               : chr [1:40] \"Diomedea\" \"Diomedea\" \"Diomedea\" \"Diomedea\" ... ##   ..$ family              : chr [1:40] \"Diomedeidae\" \"Diomedeidae\" \"Diomedeidae\" \"Diomedeidae\" ... ##   ..$ species_group       : chr [1:40] \"Wandering albatross\" \"Wandering albatross\" \"Wandering albatross\" \"Wandering albatross\" ... ##   ..$ catchability_group  : chr [1:40] \"Wandering albatross\" \"Wandering albatross\" \"Wandering albatross\" \"Wandering albatross\" ... ##   ..$ capture_group       : chr [1:40] \"Great albatross\" \"Great albatross\" \"Great albatross\" \"Great albatross\" ... ##   ..$ id_code             : int [1:40] 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ id_genus            : num [1:40] 1 1 1 1 1 1 1 2 2 2 ... ##   ..$ id_family           : int [1:40] 1 1 1 1 1 1 1 1 1 1 ... ##   ..$ code                : chr [1:40] \"DIW\" \"DQS\" \"DIX\" \"DBN\" ... ##   ..$ taxonomic_resolution: chr [1:40] \"species\" \"species\" \"species\" \"species\" ... ##   ..$ fao_code            : logi [1:40] TRUE TRUE TRUE TRUE TRUE TRUE ... ##   ..$ id_species          : int [1:40] 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ id_species_group    : num [1:40] 1 1 1 1 1 2 2 3 3 3 ... ##  $ breeding_season   :'data.frame':  25 obs. of  6 variables: ##   ..$ id_species  : int [1:25] 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ code        : chr [1:25] \"DIW\" \"DQS\" \"DIX\" \"DBN\" ... ##   ..$ common_name : chr [1:25] \"Gibson's albatross\" \"Antipodean albatross\" \"Wandering albatross\" \"Tristan albatross\" ... ##   ..$ breeding    : chr [1:25] \"1,2,3,4,5,6,7,8,9,10,11,12\" \"1,2,3,4,5,6,7,8,9,10,11,12\" \"1,2,3,4,5,6,7,8,9,10,11,12\" \"1,2,3,4,5,6,7,8,9,10,11,12\" ... ##   ..$ nonbreeding : chr [1:25] NA NA NA NA ... ##   ..$ breeding_str: chr [1:25] \"All year\" \"All year\" \"All year\" \"All year\" ... ##  $ p_nest            : num [1:25, 1:12] 0.5 0.4 0.5 0.6 0.05 0.5 0.5 0.3 0.2 0.2 ... ##   ..- attr(*, \"dimnames\")=List of 2 ##   .. ..$ : chr [1:25] \"DIW\" \"DQS\" \"DIX\" \"DBN\" ... ##   .. ..$ : chr [1:12] \"Jan\" \"Feb\" \"Mar\" \"Apr\" ... ##  $ breeding_phenology: chr [1:25, 1:12] \"IN\" \"IN\" \"IN\" \"IN\" ... ##   ..- attr(*, \"dimnames\")=List of 2 ##   .. ..$ : chr [1:25] \"DIW\" \"DQS\" \"DIX\" \"DBN\" ... ##   .. ..$ : chr [1:12] \"Jan\" \"Feb\" \"Mar\" \"Apr\" ... ##  $ p_southern        : num [1:25, 1:12] 1 1 1 1 1 1 1 1 1 1 ... ##   ..- attr(*, \"dimnames\")=List of 2 ##   .. ..$ : chr [1:25] \"DIW\" \"DQS\" \"DIX\" \"DBN\" ... ##   .. ..$ : chr [1:12] \"Jan\" \"Feb\" \"Mar\" \"Apr\" ... ##  $ N_BP              :'data.frame':  25 obs. of  6 variables: ##   ..$ id_species  : int [1:25] 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ code        : chr [1:25] \"DIW\" \"DQS\" \"DIX\" \"DBN\" ... ##   ..$ common_name : chr [1:25] \"Gibson's albatross\" \"Antipodean albatross\" \"Wandering albatross\" \"Tristan albatross\" ... ##   ..$ distribution: chr [1:25] \"log-normal\" \"log-normal\" \"log-normal\" \"weibull\" ... ##   ..$ par1        : num [1:25] 5400 3255 10072 9.25 60 ... ##   ..$ par2        : num [1:25] 0.05 0.05 0.05 1710 0.1 0.14 0.11 0.1 0.1 0.05 ... ##  $ P_B               :'data.frame':  25 obs. of  6 variables: ##   ..$ id_species  : int [1:25] 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ code        : chr [1:25] \"DIW\" \"DQS\" \"DIX\" \"DBN\" ... ##   ..$ common_name : chr [1:25] \"Gibson's albatross\" \"Antipodean albatross\" \"Wandering albatross\" \"Tristan albatross\" ... ##   ..$ distribution: chr [1:25] \"beta\" \"beta\" \"logit-normal\" \"beta\" ... ##   ..$ par1        : num [1:25] 0.467 0.364 0.494 0.349 0.6 0.531 0.531 0.596 0.596 0.844 ... ##   ..$ par2        : num [1:25] 218 230 0.05 51.3 0.05 22.2 22.2 4100 0.05 174 ... ##  $ S_curr            :'data.frame':  25 obs. of  6 variables: ##   ..$ id_species  : int [1:25] 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ code        : chr [1:25] \"DIW\" \"DQS\" \"DIX\" \"DBN\" ... ##   ..$ common_name : chr [1:25] \"Gibson's albatross\" \"Antipodean albatross\" \"Wandering albatross\" \"Tristan albatross\" ... ##   ..$ distribution: chr [1:25] \"beta\" \"beta\" \"beta\" \"beta\" ... ##   ..$ par1        : num [1:25] 0.912 0.907 0.918 0.948 0.971 0.92 0.95 0.923 0.902 0.931 ... ##   ..$ par2        : num [1:25] 59.9 138 159 1230 0.001 138 2260 1470 0.02 147 ... ##  $ S_opt             :'data.frame':  25 obs. of  6 variables: ##   ..$ id_species  : int [1:25] 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ code        : chr [1:25] \"DIW\" \"DQS\" \"DIX\" \"DBN\" ... ##   ..$ common_name : chr [1:25] \"Gibson's albatross\" \"Antipodean albatross\" \"Wandering albatross\" \"Tristan albatross\" ... ##   ..$ distribution: chr [1:25] \"uniform\" \"uniform\" \"uniform\" \"uniform\" ... ##   ..$ par1        : num [1:25] 0.95 0.95 0.95 0.95 0.95 0.95 0.95 0.93 0.93 0.93 ... ##   ..$ par2        : num [1:25] 0.98 0.98 0.98 0.98 0.98 0.98 0.98 0.97 0.97 0.97 ... ##  $ A_curr            :'data.frame':  25 obs. of  6 variables: ##   ..$ id_species  : int [1:25] 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ code        : chr [1:25] \"DIW\" \"DQS\" \"DIX\" \"DBN\" ... ##   ..$ common_name : chr [1:25] \"Gibson's albatross\" \"Antipodean albatross\" \"Wandering albatross\" \"Tristan albatross\" ... ##   ..$ distribution: chr [1:25] \"log-normal\" \"log-normal\" \"log-normal\" \"log-normal\" ... ##   ..$ par1        : num [1:25] 11.9 13.9 9.91 9.18 9.91 9.19 8.9 8.9 8.9 9.91 ... ##   ..$ par2        : num [1:25] 0.165 0.142 0.15 0.177 0.15 0.189 0.023 0.165 0.165 0.15 ... ##  $ A_opt             :'data.frame':  25 obs. of  6 variables: ##   ..$ id_species  : int [1:25] 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ code        : chr [1:25] \"DIW\" \"DQS\" \"DIX\" \"DBN\" ... ##   ..$ common_name : chr [1:25] \"Gibson's albatross\" \"Antipodean albatross\" \"Wandering albatross\" \"Tristan albatross\" ... ##   ..$ distribution: chr [1:25] \"log-normal\" \"log-normal\" \"log-normal\" \"log-normal\" ... ##   ..$ par1        : num [1:25] 11.9 13.9 9.91 9.18 9.91 9.19 8.9 8.9 8.9 9.91 ... ##   ..$ par2        : num [1:25] 0.165 0.142 0.15 0.177 0.15 0.189 0.023 0.165 0.165 0.15 ... ##  - attr(*, \"date\")= chr \"10-Feb-2025\" ##  - attr(*, \"description\")= chr \"current inputs for 2025 CCSBT risk assessment\""},{"path":"https://sefra-seabirds.github.io/sefraInputs/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Charles Edwards. Maintainer, author. Tom Peatman. Author.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Edwards C, Peatman T (2025). sefraInputs: Southern Hemisphere Seabird Risk Assessment Inputs. R package version 0.0.1, https://sefra-seabirds.github.io/sefraInputs, https://github.com/sefra-seabirds/sefraInputs.","code":"@Manual{,   title = {sefraInputs: Southern Hemisphere Seabird Risk Assessment Inputs},   author = {Charles Edwards and Tom Peatman},   year = {2025},   note = {R package version 0.0.1, https://sefra-seabirds.github.io/sefraInputs},   url = {https://github.com/sefra-seabirds/sefraInputs}, }"},{"path":"https://sefra-seabirds.github.io/sefraInputs/index.html","id":"data-preparation-scripts-for-ccsbt-southern-hemisphere-seabird-risk-assessment-","dir":"","previous_headings":"","what":"Southern Hemisphere Seabird Risk Assessment Inputs","title":"Southern Hemisphere Seabird Risk Assessment Inputs","text":"repository contains R package sefraInputs provides functions example scripts preparation observer data CCSBT SEFRA-seabird model. package also provides access biological inputs risk assessment, including demographic parameters density maps seabird populations. Compilation package create vignette containing working example data preparation risk assessment, using artificial data. data preparation process can repeated local machine, using data. sefraInputs package ensure observer datasets used risk assessment model prepared using consistent process, using biological inputs. data preparation process also generates summaries prepared observer dataset, facilitate reporting.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/index.html","id":"package-installation","dir":"","previous_headings":"","what":"Package installation","title":"Southern Hemisphere Seabird Risk Assessment Inputs","text":"attempting install sefraInputs package, users ensure followed instructions provided sefra-seabirds organisation homepage. includes: Installing sefraInputs package dependencies. Installing pandoc. Creating Personal Access Token (PAT) specific sefra-seabirds organisation required repositories. recommend Users notify repository administrators email submitted PAT request, can promptly approved. Personal Access Token (PAT) approved repository administrators, possible install sefraInputs package machine. data available via package build versioned. avoid inconsistencies repository data data may local machine, recommend package installed directly repository. can done using: command called within R session (rather command line) session loaded packages, R sessions open, otherwise may issues updating required R package dependencies. install R package sefraInputs, build package vignettes.","code":"remotes::install_github(repo = 'sefra-seabirds/sefraInputs', build_vignettes = TRUE, force = TRUE, dependencies = TRUE, auth_token = Sys.getenv('GITHUB_SEFRA_SEABIRDS_PAT'))"},{"path":"https://sefra-seabirds.github.io/sefraInputs/index.html","id":"checking-the-package-install","dir":"","previous_headings":"","what":"Checking the package install","title":"Southern Hemisphere Seabird Risk Assessment Inputs","text":"check package installed correctly, recommend following. Open R session check vignette compiled using: browseVignettes(package = 'sefraInputs') check data available using: data(package = 'sefraInputs') return list fixed data inputs. Also: sefra_data(name = NULL) return versioned data available call function, including inputsBio data objects contains demographic parameters, well seabird distribution maps. function access data directly repository, internet connection therefore required (see ?sefra_data).","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/index.html","id":"package-vignette-demonstrating-data-preparation-for-use-in-the-risk-assessment-model","dir":"","previous_headings":"","what":"Package vignette demonstrating data preparation for use in the risk assessment model","title":"Southern Hemisphere Seabird Risk Assessment Inputs","text":"package includes vignette demonstrates preparation synthetic observer dataset use risk assessment model. vignette can accessed using: selecting HTML link ‘Create SEFRA inputs’ vignette.","code":"browseVignettes(package = 'sefraInputs')"},{"path":"https://sefra-seabirds.github.io/sefraInputs/index.html","id":"issues-installing-the-package","dir":"","previous_headings":"","what":"Issues installing the package?","title":"Southern Hemisphere Seabird Risk Assessment Inputs","text":"issues installing package, please create new Issue sefraInputs Github repository description problem error messages, project team assist.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/aggregate_captures.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate captures — aggregate_captures","title":"Aggregate captures — aggregate_captures","text":"Captures stored list items per fishing event. extract, event unlisted, matched species species group summed.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/aggregate_captures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate captures — aggregate_captures","text":"","code":"aggregate_captures(data, strata, lookup = list(), verbose = FALSE)"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/aggregate_captures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate captures — aggregate_captures","text":"data data frame tibble (tbl_df) captures strata character vector columns used group sum captures lookup list species groupings verbose report captures dropped aggregation","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/aggregate_captures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate captures — aggregate_captures","text":"object class class(data) total captures (n_captures) per species groupings lookup (group). group takes values names lookup argument. aggregated captures (optionally) grouped variables strata argument. Species groups captures included returned object n_captures = 0, combination variables strata argument provided.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/aggregate_captures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate captures — aggregate_captures","text":"","code":"library(sefraInputs) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union data(inputsBio) #> Warning: data set 'inputsBio' not found  # examples with named vector of species codes assign(\"species\", inputsBio[[1]][['sp_codes']]$code) #> Error: object 'inputsBio' not found names(species) <- species #> Error: object 'species' not found codes <- lapply(1:20, function(x) sample(species, size = sample(1:5, size = 1))) #> Error in FUN(X[[i]], ...): object 'species' not found captures <- lapply(codes, function(x) sample(1:10, size = length(x))) #> Error: object 'codes' not found x <- data.frame(id_fishery_group = rep(1:2, each = 10), id_period = rep(1:3, length = 20), code = I(codes), n_captures = I(captures)) #> Error: object 'codes' not found x %>% aggregate_captures(., lookup = species) #> Error: object 'x' not found x %>% aggregate_captures(., strata = \"id_fishery_group\", lookup = species) #> Error: object 'x' not found x %>% aggregate_captures(., strata = c(\"id_fishery_group\", \"id_period\"), lookup = species) #> Error: object 'x' not found  # example with unnamed vector of species codes names(species) <- NULL #> Error: object 'species' not found x %>% aggregate_captures(., lookup = species) #> Error: object 'x' not found"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/aggregate_overlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate (sum) overlap per strata. — aggregate_overlap","title":"Aggregate (sum) overlap per strata. — aggregate_overlap","text":"Sums overlap according specified strata species always included default. Overlap assumed calculated call get_overlap.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/aggregate_overlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate (sum) overlap per strata. — aggregate_overlap","text":"","code":"aggregate_overlap(object, ...)  # S3 method for class 'tbl_df' aggregate_overlap(object, ...)  # S3 method for class 'data.frame' aggregate_overlap(object, ...)"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/aggregate_overlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate (sum) overlap per strata. — aggregate_overlap","text":"object tibble data.frame object containing overlap values grouping strata. Columns containing overlap data \"overlap_\" prefix (e.g. overlap_diw). ... Grouping strata, typically fishery group.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/aggregate_overlap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate (sum) overlap per strata. — aggregate_overlap","text":"object class class(object), overlap (overlap) summed per species code per strata.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/aggregate_overlap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate (sum) overlap per strata. — aggregate_overlap","text":"","code":"library(sefraInputs) library(dplyr) x <- data.frame(id_fishery_group = rep(1:2, each = 10), id_period = rep(1:3, length = 20), overlap_diw = runif(20), overlap_prk = runif(20)) x %>% aggregate_overlap(id_fishery_group) #>   code id_fishery_group  overlap #> 1  DIW                1 4.439794 #> 2  DIW                2 3.833615 #> 3  PRK                1 5.587649 #> 4  PRK                2 4.157534 x %>% aggregate_overlap(id_fishery_group, id_period) #>    code id_fishery_group id_period   overlap #> 1   DIW                1         1 1.5082575 #> 2   DIW                1         2 1.1314997 #> 3   DIW                1         3 1.8000364 #> 4   DIW                2         1 0.6186125 #> 5   DIW                2         2 2.5740723 #> 6   DIW                2         3 0.6409303 #> 7   PRK                1         1 1.2258513 #> 8   PRK                1         2 2.1891326 #> 9   PRK                1         3 2.1726650 #> 10  PRK                2         1 0.9133408 #> 11  PRK                2         2 1.5910297 #> 12  PRK                2         3 1.6531637"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/assign_fishery_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign fishery groups — assign_fishery_groups","title":"Assign fishery groups — assign_fishery_groups","text":"Assigns fishery group identifiers used define groupings fishing effort share catchability parameters. fishery groups defined look-table (lk_definitions) joined data object using left_join. Names fishery group defined lk_names. Information relating previously assigned fishery groups data object removed, including fishery group IDs (id_fishery_group) names (fishery_group). lookup table defining fishery groups (lk_definitions) must following fields: id_fishery_group - fishery group identifier (integer). Additionally, must variable named fishery_group, reserved names fishery groups. lookup table providing fishery group names (lk_names) must following fields: id_fishery_group - fishery group identifier (integer); fishery_group - fishery group name (character). name can include spaces, include punctuation characters. Additionally, name include LaTeX special characters, e.g., underscores (_), ampersands (&), dollar signs ($) etc. record data match one defined fishery group, fishery group one name.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/assign_fishery_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign fishery groups — assign_fishery_groups","text":"","code":"assign_fishery_groups(data, lk_definitions, lk_names, ...)"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/assign_fishery_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign fishery groups — assign_fishery_groups","text":"data object fishery group identifiers joined. lk_definitions look-table defines fishery groups. lk_definitions must include field fishery group identifiers (id_fishery_group). lk_names look-table provides name fishery group. lk_names must include field fishery group identifiers (id_fishery_group) fishery group names (fishery_group). ... additional arguments left_join.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/assign_fishery_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign fishery groups — assign_fishery_groups","text":"object class class(data) including fishery group identifiers (id_fishing_group).","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/assign_fishery_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign fishery groups — assign_fishery_groups","text":"","code":"library(sefraInputs) x <- data.frame(effort = floor(runif(10, 100, 2000)), flag = sample(c(\"A\", \"B\", \"C\"), size = 10, replace = TRUE)) y <- data.frame(id_fishery_group = c(1L, 2L, 2L), flag = c(\"A\", \"B\", \"C\")) z <- data.frame(id_fishery_group = 1:2, fishery_group = c(\"Flag A\", \"Flag BC\")) assign_fishery_groups(x, y, z) #> Joining with `by = join_by(flag)` #>    effort flag id_fishery_group #> 1    1392    A                1 #> 2    1047    B                2 #> 3    1319    C                2 #> 4    1354    A                1 #> 5     282    B                2 #> 6    1554    B                2 #> 7    1562    C                2 #> 8    1982    B                2 #> 9    1943    A                1 #> 10    839    A                1"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/assign_species_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign species groups — assign_species_groups","title":"Assign species groups — assign_species_groups","text":"Assigns species groups data frame links species codes species groups. Species within species group share catchability parameters. species groups defined look-table (lookup), joined data using left_join. previous id_species_group species_group definitions data object replaced.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/assign_species_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign species groups — assign_species_groups","text":"","code":"assign_species_groups(data, lookup, verbose = FALSE, ...)"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/assign_species_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign species groups — assign_species_groups","text":"data data frame, updated species groups added. data intended structure object defining species grouping Edwards et al. 2023 (see sp_groups element inputsBio). lookup look-table defines species groups based variables, e.g., species codes taxonomic information. lookup must include fields species group identifiers (id_species_group - integer) species group names (species_group - character). species group name can include spaces, include punctuation characters. Additionally, name include LaTeX special characters, e.g., underscores (_), ampersands (&), dollar signs ($) etc. verbose report species groups set NA (.e., codes species-specific). ... additional arguments left_join.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/assign_species_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign species groups — assign_species_groups","text":"data frame, updated species group identifiers (id_species_group) names (species_group).","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/assign_species_groups.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Assign species groups — assign_species_groups","text":"id_species_group species_group set NA codes specific individual species.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/assign_species_groups.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Assign species groups — assign_species_groups","text":"Edwards, C.T.T.; Peatman, T.; Roberts, J.O.; Devine, J..; Hoyle, S.D. (2023). Updated fisheries risk assessment framework seabirds Southern Hemisphere. New Zealand Aquatic Environment Biodiversity Report . 321. 103 p.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/assign_species_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign species groups — assign_species_groups","text":"","code":"library(sefraInputs)  # get species groupings from Edwards et al. (2023) data(inputsBio) #> Warning: data set 'inputsBio' not found assign(\"x\", inputsBio[[1]][['sp_groups']]) #> Error: object 'inputsBio' not found  # Assign species groups based on genus y <- data.frame(genus = c(\"Diomedea\", \"Thalassarche\", \"Phoebetria\", \"Macronectes\", \"Procellaria\"), id_species_group = 1:5,                 species_group = c(\"Great albatross\", \"Mollymawks\", \"Sooty albatrosses\", \"Giant petrels\", \"Procellaria species\")) assign_species_groups(x, y, by = \"genus\") #> Error: object 'x' not found  # Assign species groups based on family y <- data.frame(family = c(\"Diomedeidae\", \"Procellariidae\"),                 id_species_group = 1:2, species_group = c(\"Albatrosses\", \"Petrels\")) assign_species_groups(x, y) #> Error: object 'x' not found"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/assign_time_periods.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign time periods — assign_time_periods","title":"Assign time periods — assign_time_periods","text":"Assigns time period identifiers used define years shared catchability parameters. time periods defined look-table (lk_definitions) joined data object using left_join. names fishery group defined lk_names. Information relating previously assigned time periods data object removed, including time period IDs (id_period) names (period). lookup table defining time periods (lk_definitions) must following fields: id_period - time period identifier (integer). Additionally, must variable named period, reserved names time periods. lookup table providing time period names (lk_names) must following fields: id_period - time period identifier (integer); period - time period name (character). name can include spaces, include punctuation characters. Additionally, name include LaTeX special characters, e.g., underscores (_), ampersands (&), dollar signs ($) etc. record data match one defined time period, time group one name.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/assign_time_periods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign time periods — assign_time_periods","text":"","code":"assign_time_periods(data, lk_definitions, lk_names, ...)"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/assign_time_periods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign time periods — assign_time_periods","text":"data object time period identifiers added lk_definitions look-table defines time periods. lk_definitions must include field time period identifiers (id_period). lk_names look-table includes names time periods. lk_names must include field time period identifiers (id_period). ... additional arguments left_join.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/assign_time_periods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign time periods — assign_time_periods","text":"object class class(data) including time period identifiers (id_period).","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/assign_time_periods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign time periods — assign_time_periods","text":"","code":"library(sefraInputs) x <- data.frame(effort = floor(runif(10, 100, 2000)), year = sample(2011:2020, size = 10, replace = TRUE)) y <- data.frame(id_period = c(rep(1L, times = 5), rep(2L, times = 5)), year = 2011:2020) z <- data.frame(id_period = 1:2, period = c(\"Pre 2015\", \"2016 onwards\")) assign_time_periods(x, y, z) #> Joining with `by = join_by(year)` #>    effort year id_period #> 1    1183 2020         2 #> 2     737 2013         1 #> 3    1232 2012         1 #> 4     463 2017         2 #> 5    1900 2020         2 #> 6    1130 2013         1 #> 7    1134 2016         2 #> 8     629 2014         1 #> 9     948 2020         2 #> 10    805 2011         1"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/check_observed_captures.html","id":null,"dir":"Reference","previous_headings":"","what":"Check observed captures — check_observed_captures","title":"Check observed captures — check_observed_captures","text":"Checks observed captures dataset (minimum) variables required data preparation: flag - ISO 3166-1 alpha-3 compliant country code, e.g., \"NZL\" (character); year - calendar year (integer); month - month (integer); lat lon - latitude longitude (decimal degrees - numeric), geometry - simple feature collection (class sfc); code - three-letter 'species' code (character - see sp_groups$code set bioligical inputsinputsBio); status - status captures -vessel (\"alive\"), \"dead\" NA unknown); age_class - age-class captures (\"adult\"), \"immature\", \"juvenile\" NA unknown); n_captures - number individuals (integer numeric). function output assigned returned object contain additional data grooming steps: NA values code removed; NA zero values n_captures removed. User additionally ensure observed captures dataset filtered include captures strata available observed effort, e.g., information required minimum variables missing strata. example process provided make_inputs vignette: vignette(\"make_inputs\", package = \"sefraInputs\").","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/check_observed_captures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check observed captures — check_observed_captures","text":"","code":"check_observed_captures(data)"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/check_observed_captures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check observed captures — check_observed_captures","text":"data object check","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/check_observed_captures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check observed captures — check_observed_captures","text":"assigned, returns object class class(data), data grooming exclude missing values required fields.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/check_observed_captures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check observed captures — check_observed_captures","text":"","code":"library(sefraInputs) library(dplyr) x <- data.frame(   flag = c(NA, rep(\"NZL\", times = 19)), year = sample(2015:2020, size = 20, replace = TRUE),   month = sample(1:12, size = 20, replace = TRUE),   lat = sample(-(35:40), size = 20, replace = TRUE), lon = sample(100:140, size = 20, replace = TRUE),   code = sample(c(\"DIW\", \"PRK\", \"PRO\"), size = 20, replace = TRUE),   status = sample(c(\"alive\", \"dead\", NA), size = 20, replace = TRUE),   age_class = sample(c(\"adult\", \"immature\", NA), size = 20, replace = TRUE),   n_captures = sample(0:5, size = 20, replace = TRUE)) # check structure of x: check_observed_captures(x) # check structure of x with additional data grooming: x_groomed <- check_observed_captures(x) nrow(x); nrow(x_groomed) #> [1] 20 #> [1] 17"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/check_observed_effort.html","id":null,"dir":"Reference","previous_headings":"","what":"Check observed effort — check_observed_effort","title":"Check observed effort — check_observed_effort","text":"Checks observed effort dataset (minimum) variables required data preparation: flag - ISO 3166-1 alpha-3 compliant country code, e.g., \"NZL\" (character); year - calendar year (integer); month - month (integer); lat lon - latitude longitude (decimal degrees - numeric), geometry - simple feature collection (class sfc); observer_effort - observed effort, thousand hooks (numeric). function output assigned returned object contain additional data grooming steps: NA values flag removed; NA values year | month removed; NA values lat | lon geometry removed; NA zero values observer_effort removed.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/check_observed_effort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check observed effort — check_observed_effort","text":"","code":"check_observed_effort(data)"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/check_observed_effort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check observed effort — check_observed_effort","text":"data object check","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/check_observed_effort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check observed effort — check_observed_effort","text":"assigned, returns object class class(data), data grooming exclude missing values required fields.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/check_observed_effort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check observed effort — check_observed_effort","text":"","code":"library(sefraInputs) library(dplyr) x <- data.frame(flag = c(NA, rep(\"NZL\", times = 19)), year = sample(2015:2020, size = 20, replace = TRUE),             month = sample(1:12, size = 20, replace = TRUE),             lat = sample(-(35:40), size = 20, replace = TRUE), lon = sample(100:140, size = 20, replace = TRUE),             observer_effort = rnorm(20, mean = 2, sd = 0.5)) # check structure of x: check_observed_effort(x) # check structure of x with additional data grooming: x_groomed <- check_observed_effort(x) nrow(x); nrow(x_groomed) #> [1] 20 #> [1] 19"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/check_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Check column sum — check_sum","title":"Check column sum — check_sum","text":"Check sum column columns within data frame.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/check_sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check column sum — check_sum","text":"","code":"check_sum(object, value, ...)"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/check_sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check column sum — check_sum","text":"object Input data frame. value Numeric value checked . ... Column columns object summed checked value.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/check_sum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check column sum — check_sum","text":"Logical value indicating whether sum column columns specified ... equal value.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/check_sum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check column sum — check_sum","text":"","code":"library(sefraInputs) x <- data.frame(a = 1:10, b = runif(10), z = runif(10)) B <- sum(x$b) Z <- sum(x$z) check_sum(x, B, b) #> [1] TRUE check_sum(x, B + Z, b, z) #> [1] TRUE check_sum(x, B + Z, b:z) #> [1] TRUE"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/filter_captures.html","id":null,"dir":"Reference","previous_headings":"","what":"Return captures that match a given field condition — filter_captures","title":"Return captures that match a given field condition — filter_captures","text":"Can used subset captures data e.g. extracting captures meet condition captures_status == \"alive\".","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/filter_captures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return captures that match a given field condition — filter_captures","text":"","code":"filter_captures(data, field = character(), condition = character())"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/filter_captures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return captures that match a given field condition — filter_captures","text":"data data frame captures containing following field headers: 'code', 'id_code', 'captures_status', 'age_class', 'n_captures'. data must tibble (e.g. class tbl_df). field field data test condition (e.g. \"captures_status\") condition value field variable test  (e.g. \"alive\")","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/filter_captures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return captures that match a given field condition — filter_captures","text":"data frame, filtered captures data field equal condition.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/filter_captures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return captures that match a given field condition — filter_captures","text":"","code":"library(sefraInputs) library(dplyr) data(inputsBio) #> Warning: data set 'inputsBio' not found assign(\"sp_groups\", inputsBio[[1]][[\"sp_groups\"]]) #> Error: object 'inputsBio' not found codes <- lapply(1:20, function(x) sample(c(\"DIW\", \"PRK\", \"PRO\"), size = sample(1:5, size = 1), replace = TRUE)) ids <- lapply(codes, function(x) sapply(x, function(i) sp_groups$id_code[which(sp_groups$code %in% i)], USE.NAMES = FALSE)) #> Error in FUN(X[[i]], ...): object 'sp_groups' not found status <- lapply(codes, function(x) sample(c(\"alive\", \"dead\", NA), size = length(x), replace = TRUE)) age_class = lapply(codes, function(x) sample(c(\"adult\", \"immature\", NA), size = length(x), replace = TRUE)) captures <- lapply(codes, function(x) sample(1:10, size = length(x), replace = TRUE)) x <- data.frame(id_fishery_group = rep(1:2, each = 10), id_period = rep(1:3, length = 20),                 code = I(codes), id_code = I(ids), captures_status = I(status), age_class = I(age_class), n_captures = I(captures)) #> Error: object 'ids' not found x %>% filter_captures(., field = \"captures_status\", condition = \"alive\") #> Error: object 'x' not found x %>% filter_captures(., field = \"captures_status\", condition = \"dead\") #> Error: object 'x' not found"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/geom_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Southern hemisphere grid cells — geom_grid","title":"Southern hemisphere grid cells — geom_grid","text":"Return ggplot object southern hemisphere grid cells.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/geom_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Southern hemisphere grid cells — geom_grid","text":"","code":"geom_grid(...)"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/geom_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Southern hemisphere grid cells — geom_grid","text":"... arguments passed geom_sf.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/geom_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Southern hemisphere grid cells — geom_grid","text":"","code":"library(ggplot2) library(sf) #> Warning: package 'sf' was built under R version 4.4.2 #> Linking to GEOS 3.12.2, GDAL 3.9.3, PROJ 9.4.1; sf_use_s2() is TRUE library(sefraInputs) ggplot() + geom_grid() + theme_sh()"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/geom_stat_areas.html","id":null,"dir":"Reference","previous_headings":"","what":"Statistical areas for CCSBT — geom_stat_areas","title":"Statistical areas for CCSBT — geom_stat_areas","text":"Return ggplot object CCSBT statistical areas southern hemisphere.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/geom_stat_areas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Statistical areas for CCSBT — geom_stat_areas","text":"","code":"geom_stat_areas(...)"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/geom_stat_areas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Statistical areas for CCSBT — geom_stat_areas","text":"... arguments passed geom_sf.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/geom_stat_areas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Statistical areas for CCSBT — geom_stat_areas","text":"","code":"library(ggplot2) library(sf) library(sefraInputs) ggplot() + geom_stat_areas(col = \"red\") + theme_sh()"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/get_id_cell.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cell identifiers for locations — get_id_cell","title":"Get cell identifiers for locations — get_id_cell","text":"Retrieves cell identifiers argument grid locations x.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/get_id_cell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cell identifiers for locations — get_id_cell","text":"","code":"get_id_cell(x, ...)  # S4 method for class 'sf' get_id_cell(x, fun = NULL, ...)"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/get_id_cell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cell identifiers for locations — get_id_cell","text":"x sf object. ... arguments parsed methods (currently unused) fun (optional) function returns unique value provided numeric vector, e.g. locations fall boundaries intersections cells grid match multiple cells.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/get_id_cell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get cell identifiers for locations — get_id_cell","text":"object class sf, additional variable id_cell providing cell identifiers grid.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/get_id_cell.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get cell identifiers for locations — get_id_cell","text":"locations falling boundaries intersections multiple cells grid, fun can used return single cell identifier location, e.g. setting fun min. fun used least one record x matches two cells grid.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/get_id_cell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get cell identifiers for locations — get_id_cell","text":"","code":"library(sefraInputs) library(dplyr) # signature \"sf\" library(sf) data(grid) x <- data.frame(lat = c(-42.5, -37.5, -35), lon = c(167.5, 172.5, 175)) x <- x %>% rowwise(.) %>%   mutate(., geometry = list(st_point(c(lon, lat)))) %>%   ungroup(.) %>%   st_as_sf(., crs = \"EPSG:4326\") x <- x %>% st_transform(crs = st_crs(grid)) get_id_cell(x) #> Simple feature collection with 3 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -224413.3 ymin: 5139910 xmax: 513825.6 ymax: 5873053 #> Projected CRS: +proj=laea +lat_0=-90 +lon_0=170 #> # A tibble: 3 × 4 #>     lat   lon            geometry id_cell   #>   <dbl> <dbl>         <POINT [m]> <list>    #> 1 -42.5  168. (-224413.3 5139910) <int [1]> #> 2 -37.5  172.  (246362.2 5642623) <int [1]> #> 3 -35    175   (513825.6 5873053) <int [4]> get_id_cell(x, fun = min) #> Simple feature collection with 3 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -224413.3 ymin: 5139910 xmax: 513825.6 ymax: 5873053 #> Projected CRS: +proj=laea +lat_0=-90 +lon_0=170 #> # A tibble: 3 × 4 #>     lat   lon            geometry id_cell #>   <dbl> <dbl>         <POINT [m]>   <int> #> 1 -42.5  168. (-224413.3 5139910)     646 #> 2 -37.5  172.  (246362.2 5642623)     719 #> 3 -35    175   (513825.6 5873053)     719"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/get_overlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Get seabird overlap with fishing effort — get_overlap","title":"Get seabird overlap with fishing effort — get_overlap","text":"Retrieves seabird numbers density locations fishing effort calculates overlap (.e. seabird density times effort).","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/get_overlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get seabird overlap with fishing effort — get_overlap","text":"","code":"get_overlap(x, y, ...)  # S4 method for class 'sf,character' get_overlap(   x,   y,   group_name = \"group\",   effort_name = \"effort\",   na_replace = NULL,   ... )"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/get_overlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get seabird overlap with fishing effort — get_overlap","text":"x fishing effort sf object. y character object specifying species code (e.g. DIW). ... arguments parsed methods (currently unused) group_name column header x matching layer names y object. effort_name column header x storing effort. na_replace numeric value replace NA values introduced x entries outside range species distribution. na_replace = NULL (default) NA values retained.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/get_overlap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get seabird overlap with fishing effort — get_overlap","text":"object class sf, additional column overlap (e.g. y = \"DIW\" returned object additional column overlap_diw).","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/get_overlap.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get seabird overlap with fishing effort — get_overlap","text":"function retrieves seabird density layer global environment. ensure density layers available access use .call(data, list(paste0(\"densities_\", tolower(y)), package = \"sefraInputs\", envir = .GlobalEnv)).","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/get_overlap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get seabird overlap with fishing effort — get_overlap","text":"","code":"library(sefraInputs) library(dplyr) # signature c(\"sf\", \"character\") library(sf) data(grid) data(densities_pro) #> Warning: data set 'densities_pro' not found x <- data.frame(month = month.abb[1:12], lat = rep(-42.5, times = 12), lon = rep(87.5, times = 12), effort = rep(1.0, times = 12)) x <- x %>% rowwise(.) %>%   mutate(., geometry = list(st_point(c(lon, lat)))) %>%   ungroup(.) %>%   st_as_sf(., crs = \"EPSG:4326\") x <- x %>% st_transform(crs = st_crs(grid)) get_overlap(x, \"PRO\", group_name = \"month\", effort_name = \"effort\") #> Error in .local(x, y, ...): paste0(\"densities_\", tolower(y)) %in% ls(.GlobalEnv) is not TRUE"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/join_species_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Join data frame to species group definitions — join_species_groups","title":"Join data frame to species group definitions — join_species_groups","text":"function join data.frame tibble object species group definitions using species code. can used following calculation overlap captures per species.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/join_species_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join data frame to species group definitions — join_species_groups","text":"","code":"join_species_groups(object, lookup, ...)  # S3 method for class 'tbl_df' join_species_groups(object, lookup, ...)  # S3 method for class 'data.frame' join_species_groups(object, lookup, ...)"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/join_species_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join data frame to species group definitions — join_species_groups","text":"object data.frame tibble object column containing species codes. lookup data.frame tibble object providing lookup table species groups definitions. ... Arguments passed left_join.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/join_species_groups.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Join data frame to species group definitions — join_species_groups","text":"function uses left_join assign species group definitions object argument. Species included output present input.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/make_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to create or clean a directory — make_folder","title":"Utility function to create or clean a directory — make_folder","text":"Make folder already exist, clean folder exist. files .tex, .RData, .rda .png suffixes deleted. can useful code scripts require existing files deleted part script run.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/make_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to create or clean a directory — make_folder","text":"","code":"make_folder(path, clean = FALSE, ...)"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/make_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to create or clean a directory — make_folder","text":"path path folder (character string) clean directory cleaned already present? ... additional arguments dir.create.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/numeric_table_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Format tables with numeric values — numeric_table_format","title":"Format tables with numeric values — numeric_table_format","text":"Reformats (numeric) variables data frames tibbles use spaces thousand separator, rounded specified number digits.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/numeric_table_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format tables with numeric values — numeric_table_format","text":"","code":"numeric_table_format(x, ...)  # S3 method for class 'tbl' numeric_table_format(x, names, digits = rep(0, length(names)), ...)  # S3 method for class 'data.frame' numeric_table_format(x, names, digits = rep(0, length(names)), ...)"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/numeric_table_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format tables with numeric values — numeric_table_format","text":"x data frame tibble variables reformat. ... arguments parsed methods (currently unused) names character vector variable names x reformat. digits number decimal places round variables (using round). digits can : length 1, applied variables names; , length equal length(names), decimal places specific variable names.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/numeric_table_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format tables with numeric values — numeric_table_format","text":"object class x, variables names reformatted. Note variables names coerced characters.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/numeric_table_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format tables with numeric values — numeric_table_format","text":"","code":"dat <- data.frame(a = LETTERS[1:10], b = (1:10) * 500, c = (-5:4) * 500) numeric_table_format(dat, c(\"b\", \"c\"), digits = 1) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> New names: #> • `` -> `...1` #> • `` -> `...2` #>    a       b        c #> 1  A   500.0 -2 500.0 #> 2  B 1 000.0 -2 000.0 #> 3  C 1 500.0 -1 500.0 #> 4  D 2 000.0 -1 000.0 #> 5  E 2 500.0   -500.0 #> 6  F 3 000.0      0.0 #> 7  G 3 500.0    500.0 #> 8  H 4 000.0  1 000.0 #> 9  I 4 500.0  1 500.0 #> 10 J 5 000.0  2 000.0 numeric_table_format(dat, c(\"b\", \"c\"), digits = c(1, 2)) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> New names: #> • `` -> `...1` #> • `` -> `...2` #>    a       b         c #> 1  A   500.0 -2 500.00 #> 2  B 1 000.0 -2 000.00 #> 3  C 1 500.0 -1 500.00 #> 4  D 2 000.0 -1 000.00 #> 5  E 2 500.0   -500.00 #> 6  F 3 000.0      0.00 #> 7  G 3 500.0    500.00 #> 8  H 4 000.0  1 000.00 #> 9  I 4 500.0  1 500.00 #> 10 J 5 000.0  2 000.00"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/sefra_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load versioned data from sefraInputs — sefra_data","title":"Load versioned data from sefraInputs — sefra_data","text":"Download data directly package repository current environment.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/sefra_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load versioned data from sefraInputs — sefra_data","text":"","code":"sefra_data(name = NULL, description = \"reference\", verbose = TRUE)"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/sefra_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load versioned data from sefraInputs — sefra_data","text":"name character string giving name data source. list available data can set NULL (default). description character string giving description data version use. default description = \"reference\". set NULL function request input value identify data version. verbose logical value indicating whether data description printed screen.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/sefra_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load versioned data from sefraInputs — sefra_data","text":"Similar call data(), sefra_data() function load named object global environment unless assigned.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/sefra_data.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Load versioned data from sefraInputs — sefra_data","text":"function requires Personal Access Token (PAT) correctly installed machine. check , use Sys.getenv(\"GITHUB_SEFRA_SEABIRDS_PAT\"), return PAT used access sefraInputs repository.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/theme_sh.html","id":null,"dir":"Reference","previous_headings":"","what":"Southern hemisphere theme — theme_sh","title":"Southern hemisphere theme — theme_sh","text":"Theme plotting southern hemisphere maps polar projection \"+proj=laea +lat_0=-90 +lon_0=170\".","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/theme_sh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Southern hemisphere theme — theme_sh","text":"","code":"theme_sh(size = 12)"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/theme_sh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Southern hemisphere theme — theme_sh","text":"size Strip text size passed strip.text = element_text(size)","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/versionUpdate.html","id":null,"dir":"Reference","previous_headings":"","what":"Version update — versionUpdate","title":"Version update — versionUpdate","text":"Update version number.","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/versionUpdate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Version update — versionUpdate","text":"","code":"versionUpdate(version, update = \"0.0.0\")"},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/versionUpdate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Version update — versionUpdate","text":"version character string version number update update character string update increment","code":""},{"path":"https://sefra-seabirds.github.io/sefraInputs/reference/versionUpdate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Version update — versionUpdate","text":"","code":"versionUpdate(\"0.0.9\", update = \"0.0.1\") #> [1] \"0.1.0\""}]
